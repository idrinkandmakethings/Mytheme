@typeparam TableItem


<Styled @bind-Classname="@gridStyle">
    & th, td{
        padding: 15px;
        border: 1px solid #d1d1d1;
        text-align: center;
    }
</Styled>

<Styled @bind-Classname="@gridHeader">
    text-align: center;
    border-collapse: collapse;
    background: #ebebeb;
</Styled>

<Styled @bind-Classname="@gridRow" PseudoClass="PseudoClasses.Hover">
    background: #9fcdf4;
</Styled>

<Styled @bind-Classname="@pageButton">
    margin-right: 5px;
    margin-top: 5px;
</Styled>

<Styled @bind-Classname="@currentPage">
    background-color: dodgerblue;
    color: white;
</Styled>

<table class="@gridStyle">
    <thead>
    <tr class="@gridHeader">@GridHeader</tr>
    </thead>32
    <tbody>
    @foreach (var item in ItemList)
    {
        <tr class="@gridRow">@GridRow(item)</tr>
    }
    </tbody>
</table>
<div class="pagination">

    <button class="btn pagebutton btn-info" @onclick=@(async () => SetPagerSize("back"))>&laquo;</button>
    <button class="btn pagebutton btn-secondary" @onclick=@(async () => NavigateToPage("previous"))>Prev</button>

    @for (int i = startPage; i <= endPage; i++)
    {
        var page = i;
        <button class="btn pagebutton @(page==curPage?currentPage:"")" @onclick=@(async () => UpdateList(page))>
            @page
        </button>
    }

    <button class="btn pagebutton btn-secondary" @onclick=@(async () => NavigateToPage("next"))>Next</button>
    <button class="btn pagebutton btn-info" @onclick=@(async () => SetPagerSize("forward"))>&raquo;</button>

    <span class="pagebutton btn btn-link disabled">Page @curPage of @totalPages</span>

</div>  

@code {
    // css class names
    private string gridStyle, gridHeader, gridRow, pageButton, currentPage;

    int totalPages;
    int curPage;
    int pagerSize;

    int startPage;
    int endPage;

    [Parameter]
    public RenderFragment GridHeader { get; set; }

    [Parameter]
    public RenderFragment<TableItem> GridRow { get; set; }

    [Parameter]
    public IEnumerable<TableItem> Items { get; set; }

    [Parameter]
    public int PageSize { get; set; }

    IEnumerable<TableItem> ItemList { get; set; }

    protected override void OnInitialized()
    {
        pagerSize = 5;
        curPage = 1;

        ItemList = Items.Skip((curPage - 1) * PageSize).Take(PageSize);
        totalPages = (int)Math.Ceiling(Items.Count() / (decimal)PageSize);

        SetPagerSize("forward");
    }

    public void UpdateList(int currentPage)
    {
        ItemList = Items.Skip((currentPage - 1) * PageSize).Take(PageSize);
        curPage = currentPage;
        this.StateHasChanged();
    }

    public void SetPagerSize(string direction)
    {
        if (direction == "forward" && endPage < totalPages)
        {
            startPage = endPage + 1;
            if (endPage + pagerSize < totalPages)
            {
                endPage = startPage + pagerSize - 1;
            }
            else
            {
                endPage = totalPages;
            }
            this.StateHasChanged();
        }
        else if (direction == "back" && startPage > 1)
        {
            endPage = startPage - 1;
            startPage = startPage - pagerSize;
        }
    }

    public void NavigateToPage(string direction)
    {
        if (direction == "next")
        {
            if (curPage < totalPages)
            {
                if (curPage == endPage)
                {
                    SetPagerSize("forward");
                }
                curPage += 1;
            }
        }
        else if (direction == "previous")
        {
            if (curPage > 1)
            {
                if (curPage == startPage)
                {
                    SetPagerSize("back");
                }
                curPage -= 1;
            }
        }

        UpdateList(curPage);
    }
}
