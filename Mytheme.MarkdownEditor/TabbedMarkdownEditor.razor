@using System.Text.RegularExpressions
@using Ganss.XSS
@using Markdig

@inject IHtmlSanitizer Sanitizer

    <Styled @bind-Classname="@wideView">
        width: 100%;
        box-sizing: border-box;
        height: @($"{PercentHeight}vh");
        display: flex;
        position: relative;
        border: 1px solid lightgrey;
        @@media(max-width:1000px){
        display: none;
        }
    </Styled>

<Styled @bind-Classname="@editArea">
    background: white;
    width: @editViewSize;
    transition: 0.5s;
</Styled>

<Styled @bind-Classname="viewArea">
    padding: 10px;
    flex-grow: 1;
    word-break: break-word;
</Styled>

<Styled @bind-Classname="@editField">
    resize: none;
    width: 100%;
    height: 100%;
    border: none;
    padding: 0px;
    margin: 0px;
</Styled>

<Styled @bind-Classname="@displayArea">
    width: 50%;
    word-break: break-word;
</Styled>


<Styled @bind-Classname="@tabbedView">
    width: 100%;
    box-sizing: border-box;
    display: none;
    height: @($"{PercentHeight}vh");
    position: relative;
    @@media(max-width:1000px){
    display: inline-block;
    }
</Styled>

<Styled @bind-Classname="@editAreaTab">
    display: @editTabVisibility ;
    background: white;
    border: 1px solid lightgrey;
    width: 100%;
</Styled>

<Styled @bind-Classname="@displayAreaTab">
    display: @displayTabVisibility ;
    padding: 10px;
    width: 100%;
    height: 100%;
    word-break: break-word;
    border: 1px solid lightgrey;
</Styled>


<Styled @bind-Classname="@modeButton">
    position: absolute;
    top: 18px;
    right: 18px;
    z-index:10;
</Styled>



<div id="editorRow" class="@wideView">
    <a @onclick="ChangeView" class="@modeButton">@ModeButton</a>
    <div id="markdownEditor" class="@editArea">
        <textarea @bind-value="Content" @bind-value:event="oninput" class="@editField"></textarea>
    </div>
    <div id="markdownDisplay" class="@viewArea">
        @HtmlContent
    </div>
</div>
<div id="tabbed-editor" class="@tabbedView">
    <a @onclick="ChangeView" class="@modeButton">@ModeButton</a>
    <textarea @bind-value="Content" @bind-value:event="oninput" class="@editField @editAreaTab"></textarea>
    <div class="@displayAreaTab">
        @HtmlContent
    </div>
</div>

@code {
    private string wideView, column, editArea, editField, displayArea, viewArea, clear, modeButton, tabbedView,
        editAreaTab, displayAreaTab;

    private string editViewSize;

    private string editTabVisibility;
    private string displayTabVisibility;


    private string _content;
    private int percentHeight;

    private bool showPreview;

    private Regex bracketRegex;
    private Regex bracketNameRegex;

    [Parameter]
    public EventCallback<string> OnSaveEdit { get; set; }

    [Parameter]
    public int PercentHeight
    {
        get
        {
            if (percentHeight == 0)
                percentHeight = 25;
            return percentHeight;
        }
        set => percentHeight = value;
    }

    [Parameter]
    public string Content
    {
        get => _content;
        set
        {
            _content = value;
            HtmlContent = ConvertStringToMarkupString(_content);
        }
    }

    public MarkupString HtmlContent { get; private set; }

    public MarkupString ModeButton { get; private set; }

    protected override void OnParametersSet()
    {
        if (string.IsNullOrEmpty(Content))
        {
            editViewSize= "50%";
            editTabVisibility = "block";
            displayTabVisibility = "none";
            ModeButton = SetSvgToView();
            showPreview = false;
        }
        else
        {
            editViewSize = "0px";
            editTabVisibility = "none";
            displayTabVisibility = "block";
            ModeButton = SetSvgToEdit();
            showPreview = true;
        }
    }

    private MarkupString ConvertStringToMarkupString(string value)
    {
        if (!string.IsNullOrWhiteSpace(_content))
        {
            // Convert markdown string to HTML
            var html = Markdig.Markdown.ToHtml(value, new MarkdownPipelineBuilder().UseAdvancedExtensions().Build());

            // Sanitize HTML before rendering
            var sanitizedHtml = Sanitizer.Sanitize(html);

            var linksSet = SetBracketLinks(sanitizedHtml);

            // Return sanitized HTML as a MarkupString that Blazor can render
            return new MarkupString(linksSet);
        }

        return new MarkupString();
    }


    private async Task ChangeView()
    {
        if (showPreview)
        {
            showPreview = false;
            editTabVisibility = "block";
            displayTabVisibility = "none";
            editViewSize = "50%";
            ModeButton = SetSvgToView();
        }
        else
        {
            showPreview = true;
            editTabVisibility = "none";
            displayTabVisibility = "block";
            editViewSize = "0px";
            ModeButton = SetSvgToEdit();
            await OnSaveEdit.InvokeAsync(Content);
        }
    }

    private string SetBracketLinks(string html)
    {
        if (bracketRegex == null)
        {
            bracketRegex = new Regex(@"\[\[(.*)\](\w+):([\w\d-]+)\]", RegexOptions.Compiled);
        }

        if (bracketNameRegex == null)
        {
            bracketNameRegex = new Regex(@"\[\[([\w\d\s]+)\]\]", RegexOptions.Compiled);
        }

        var bracketDone = bracketRegex.Replace(html, @"<span><a tabindex=""0"" style=""display:inline;cursor:pointer;font-weight:bold;"" onclick=""bracketLink('$2:$3')"">$1</a></span>");
        var result = bracketNameRegex.Replace(bracketDone, @"<span><a tabindex=""0"" style=""display:inline;cursor:pointer;font-weight:bold;"" onclick=""bracketLink('$1')"">$1</a>");
        return result;
    }

    private MarkupString SetSvgToView()
    {
        return new MarkupString(@"<svg xmlns=""http://www.w3.org/2000/svg"" width=""24"" height=""24"" viewBox=""0 0 8 8"">
<path d=""M4.03 0c-2.53 0-4.03 3-4.03 3s1.5 3 4.03 3c2.47 0 3.97-3 3.97-3s-1.5-3-3.97-3zm-.03 1c1.11 0 2 .9 2 2 0 1.11-.89 2-2 2-1.1 0-2-.89-2-2 0-1.1.9-2 2-2zm0 1c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1c0-.1-.04-.19-.06-.28-.08.16-.24.28-.44.28-.28 0-.5-.22-.5-.5 0-.2.12-.36.28-.44-.09-.03-.18-.06-.28-.06z""
transform=""translate(0 1)"" />
</svg>");
    }

    private MarkupString SetSvgToEdit()
    {
        return new MarkupString(@"<svg xmlns=""http://www.w3.org/2000/svg"" width=""24"" height=""24"" viewBox=""0 0 8 8"">
<path d=""M6 0l-1 1 2 2 1-1-2-2zm-2 2l-4 4v2h2l4-4-2-2z"" />
</svg>");
    }
}

