@using Mytheme.Data
@using Mytheme.Services.Interfaces

@inject IRandomTableService RandomTableService
@inject ITemplateService TemplateService
@inject IModalService ModalService

<Styled @bind-Classname="@contentView">
    display: block;
</Styled>

<Styled @bind-Classname="@validationError">
    display: @validationDisplay;
    color: #8b0000;
</Styled>

<div>
    <span class="@validationError">@errorMessage</span>
    <label for="name">Name: </label>
    <input id="name" @bind="@Name" />
    <div>
        <button @onclick="@(() => {ModalService.Cancel();})">Cancel</button>
        <button @onclick="@HandleSubmit">Add</button>
    </div>
</div>

@code {

    private string contentView, validationError;

    private string validationDisplay = "none";

    private string errorMessage;

    private string categoryType;

    [CascadingParameter]
    public ModalParameters Parameters { get; set; }

    [Parameter]
    public string Name { get; set; }

    protected override void OnInitialized()
    {
        categoryType = Parameters?.Get<string>("type") ?? "";
    }

    private async Task HandleSubmit()
    {
        if (string.IsNullOrEmpty(Name))
        {
            errorMessage = "Name cannot be blank";
            validationDisplay = "block";
            StateHasChanged();
            return;
        }


        if (categoryType == "table")
        {
            var result = await RandomTableService.CategoryExists(Name);

            if (result.Result)
            {
                errorMessage = "Name already exists";
                validationDisplay = "block";
                StateHasChanged();
            }
            else
            {
                await RandomTableService.AddCategory(Name);
                ModalService.Close(ModalResult.Ok<string>(Name));
            }
        } else if (categoryType == "template")
        {
            var result = await TemplateService.CategoryExists(Name);

            if (result.Result)
            {
                errorMessage = "Name already exists";
                validationDisplay = "block";
                StateHasChanged();
            }
            else
            {
                await TemplateService.AddCategory(Name);
                ModalService.Close(ModalResult.Ok<string>(Name));
            }
        }
        else
        {
            errorMessage = "Unable to determine what category type we are working with!";
            validationDisplay = "block";
            StateHasChanged();
        }



    }
}
