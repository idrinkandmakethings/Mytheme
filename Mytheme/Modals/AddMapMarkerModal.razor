@using System.Text
@using System.Text.RegularExpressions
@using Mytheme.Data.Dto

@inject IModalService ModalService

<Styled @bind-Classname="@input">
    width: 100%;
</Styled>

<Styled @bind-Classname="@validationError">
    display: @validationDisplay;
    color: #8b0000;
</Styled>

<div>
    <span class="@validationError">@errorMessage</span>
    <input id="name" class="@input" placeholder="Name" @bind="@Name" />
    <br />
    <input id="link" class="@input" placeholder="Link" @bind="@Link" />
    <textarea placeholder="Description" @bind="@Description"></textarea>
    <div>
        <button @onclick="@(() => { ModalService.Cancel(); })">Cancel</button>
        <button @onclick="@HandleSubmit">Add</button>
    </div>
</div>

@code {

    private string validationError, input;

    private string validationDisplay;
    private string errorMessage;

    private double lat;
    private double lon;

    private Guid parent;

    private Regex linkRegex;

    [Parameter]
    public string Name { get; set; }
    [Parameter]
    public string Link { get; set; }
    [Parameter]
    public string Description { get; set; }

    [CascadingParameter]
    public ModalParameters Parameters { get; set; }

    protected override void OnInitialized()
    {
        lat = Parameters?.Get<double>("lat") ?? 0;
        lon = Parameters?.Get<double>("lon") ?? 0;
        parent = Parameters?.Get<Guid>("parent") ?? Guid.Empty;

        linkRegex = new Regex(@"\[\[(.*)\](\w+):([\w\d-]+)\]");
    }

    private async Task HandleSubmit()
    {

        if (!ValidateInputs())
        {
            validationDisplay = "block";
            return;
        }

        var marker = new MapMarker
        {
            Id = Guid.NewGuid(),
            FK_MapPage = parent,
            Name = Name,
            Content = SetContent(),
            Lat = lat,
            Lon = lon
        };

        ModalService.Close(ModalResult.Ok(marker));
    }

    private bool ValidateInputs()
    {
        var valid = true;

        var sb = new StringBuilder();

        if (string.IsNullOrEmpty(Name))
        {
            sb.AppendLine("Name cannot be blank.");
            valid = false;
        }

        if (Link == null)
        {
            Link = "";
        }
        else
        {
            if (!linkRegex.IsMatch(Link))
            {
                sb.AppendLine("Link format is not valid");
                valid = false;
            }
        }

        if (Description == null)
        {
            Description = "";
        }

        errorMessage = sb.ToString();

        return valid;
    }

    private string SetContent()
    {
        var sb = new StringBuilder();

        sb.Append($@"<div class=""scroll-popup"">");

        sb.Append($@"<p class=""title"">{Name}</p>");

        if (!string.IsNullOrEmpty(Link))
        {
            var match = linkRegex.Match(Link);
            if (match.Success)
            {
                sb.Append("<hr/>");
                sb.Append($@"<a tabindex=""0"" onclick=""bracketLink('{match.Groups[2].Value}:{match.Groups[3].Value}')"">{match.Groups[1].Value}</a>");
            }
        }

        if (!string.IsNullOrEmpty(Description))
        {
            sb.Append("<hr/>");
            sb.Append($"<p>{Description}</p>");
        }

        sb.Append("</div>");

        return sb.ToString();

    }

}
