@using Mytheme.Dal.Dto
@using Mytheme.Services.Interfaces

@inject ISectionService SectionService
@inject IModalService ModalService

<Styled @bind-Classname="@contentView">
    display: block;
</Styled>

<Styled @bind-Classname="@validationError">
    display: @validationDisplay;
    color: #8b0000;
</Styled>

<div>
    <span class="@validationError">@errorMessage</span>
    <input id="name" placeholder="Name" @bind="@Name" />
    <label for="type">Type: </label>
    <select id="type" name="pagetype" @bind="@pageType">
        <option value="@PageType.Person.ToString()">@PageType.Person.ToString()</option>
        <option value="@PageType.Place.ToString()">@PageType.Place.ToString()</option>
        <option value="@PageType.Thing.ToString()">@PageType.Thing.ToString()</option>
        <option value="@PageType.Rules.ToString()">@PageType.Rules.ToString()</option>
        <option value="@PageType.None.ToString()">@PageType.None.ToString()</option>
    </select>
    <div>
        <button @onclick="@(() => {ModalService.Cancel();})">Cancel</button>
        <button @onclick="@HandleSubmit">Add</button>
    </div>
</div>

@code {

    private string contentView, validationError, addBtn;

    private string validationDisplay = "none";

    private string errorMessage;

    private string parentId;

    private string pageType;

    [Parameter]
    public string Name { get; set; }

    [CascadingParameter]
    public ModalParameters Parameters { get; set; }

    protected override void OnInitialized()
    {
        parentId = Parameters?.Get<string>("parent") ?? string.Empty;

        if (string.IsNullOrEmpty(parentId))
        {
            var page = new Page
            {
                Name = string.Empty,
                FK_Section = parentId
            };

            ModalService.Close(ModalResult.Ok(page));
        }

        pageType = PageType.Person.ToString();
    }

    private async Task HandleSubmit()
    {
        if (string.IsNullOrEmpty(Name))
        {
            errorMessage = "Name cannot be blank";
            validationDisplay = "block";
            StateHasChanged();
            return;
        }

        var page = new Page
        {
            Id = Guid.Empty.ToString(),
            Name = Name,
            FK_Section = parentId,
            PageType = Enum.Parse<PageType>(pageType,true),
            Enabled = true,
            Content = "",
            Link = $"{parentId}/{Name}"
        };

        ModalService.Close(ModalResult.Ok(page));
    }
}