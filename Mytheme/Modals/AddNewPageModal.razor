@using Mytheme.Data.Dto
@using Mytheme.Services.Interfaces
@using Mytheme.Templating

@inject ISectionService SectionService
@inject IRandomTableService RandomTableService
@inject ITemplateService TemplateService
@inject IModalService ModalService

<Styled @bind-Classname="@contentView">
    display: block;
</Styled>

<Styled @bind-Classname="@fullWidth">
    width: 100%;
</Styled>

<Styled @bind-Classname="@validationError">
    display: @validationDisplay;
    color: #8b0000;
</Styled>

@if (loading)
{
    <p>Loading...</p>
}
else
{
    <div>
        <span class="@validationError">@errorMessage</span>
        <input class="@fullWidth" id="name" placeholder="Name" @bind="@Name" />
        <label for="type">Template: </label>
        <br />
        <select class="@fullWidth" @bind="@selectedTemplate">
            <option value="@Guid.Empty">None</option>
            @foreach (var option in templates)
            {
                <option value="@option.Id">@option.Label</option>
            }
        </select>
        <div>
            <button @onclick="@(() => { ModalService.Cancel(); })">Cancel</button>
            <button @onclick="@HandleSubmit">Add</button>
        </div>
    </div>
}

@code {

    private string contentView, validationError, fullWidth;

    private string validationDisplay = "none";

    private string errorMessage;

    private Guid parentId;

    private bool loading;

    private List<Option> templates;
    private TemplateRenderer renderer;
    private Guid selectedTemplate;

    [Parameter]
    public string Name { get; set; }

    [CascadingParameter]
    public ModalParameters Parameters { get; set; }

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        templates = new List<Option>();
        renderer = new TemplateRenderer(RandomTableService, TemplateService);

        parentId = Parameters?.Get<Guid>("parent") ?? Guid.Empty;
        Name = Parameters?.Get<string>("name") ?? "";

        var result = await TemplateService.GetTemplatesForSelect();
        templates = result.Result;

        templates.Sort();

        loading = false;
    }

    private async Task HandleSubmit()
    {
        if (string.IsNullOrEmpty(Name))
        {
            errorMessage = "Name cannot be blank";
            validationDisplay = "block";
            StateHasChanged();
            return;
        }

        var page = new Page
        {
            Id = Guid.Empty,
            Name = Name,
            FK_Section = parentId,
            Enabled = true,
            Content = ""
        };

        if (selectedTemplate != Guid.Empty)
        {
            var result = await TemplateService.GetTemplate(selectedTemplate);

            if (result.IsSuccess)
            {
                page.Content = await renderer.RenderTemplateToMarkDown(result.Result);
            }
        }

        ModalService.Close(ModalResult.Ok(page));
    }
}