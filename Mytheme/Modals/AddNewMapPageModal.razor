@using System.IO
@using Blazor.FileReader
@using Mytheme.Data.Dto
@using Mytheme.Services.Interfaces
@using Serilog


@inject IFileHandlerService FileHandlerService
@inject IFileReaderService FileReaderService
@inject ISectionService SectionService
@inject IModalService ModalService

<Styled @bind-Classname="@contentView">
    display: block;
</Styled>

<Styled @bind-Classname="@validationError">
    display: @validationDisplay;
    color: #8b0000;
</Styled>

<Styled @bind-Classname="@dropTarget">
    border: 3px dashed #e68710;
    padding: 3rem;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: #eee;
    box-shadow: inset 0 0 8px rgba(0,0,0,0.2);
    color: #aeaeae;
    font-size: 1.5rem;
    cursor: pointer;
    margin: 1.5rem 0 2rem 0;
    position: relative;
    word-break: break-word;
    overflow-wrap: break-word;

    & input[type=file] {
    position: absolute;
    width: 100%;
    height: 100%;
    opacity: 0;
    cursor: pointer;
    }

    &: hover{
    background-color: #f5f5f5;
    }
</Styled>


<div>
    <span class="@validationError">@errorMessage</span>
    <input id="name" placeholder="Name" @bind="@Name" />
    <div class="@dropTarget">
        <InputFile OnChange="FileChosen" />
        @status
    </div>
    <div>
        <button @onclick="@(() => {ModalService.Cancel();})">Cancel</button>
        <button @onclick="@HandleSubmit">Add</button>
    </div>
</div>



@code {
    // css class names
    private string dropTarget;
    private string contentView, validationError;

    const int MB = 20;

    const int MaxFileSize = MB * 1024 * 1024; // 5MB

    private string validationDisplay = "none";

    private string errorMessage;

    const string DefaultStatus = "Drop image here";

    private string status = DefaultStatus;

    private IFileListEntry selectedFile;

    private List<string> supportedImageTypes = new List<string>
{
        "image/jpeg",
        "image/png",
        "image/bmp",
        "image/gif"
    };

    private string parentId;

    [Parameter]
    public string Name { get; set; }

    [CascadingParameter]
    public ModalParameters Parameters { get; set; }

    protected override void OnInitialized()
    {
        parentId = Parameters?.Get<string>("parent") ?? string.Empty;

        if (string.IsNullOrEmpty(parentId))
        {
            var page = new MapPage()
            {
                Name = string.Empty,
                FK_Section = parentId
            };

            ModalService.Close(ModalResult.Cancel());
        }
    }

    private async Task HandleSubmit()
    {
        if (string.IsNullOrEmpty(Name))
        {
            errorMessage = "Name cannot be blank";
            validationDisplay = "block";
            StateHasChanged();
            return;
        }

        var imageId = Guid.NewGuid();

        try
        {
            await TryParseFile(imageId);
        }
        catch (Exception e)
        {
            errorMessage = $"Error saving image file!{Environment.NewLine}{e.Message}";
            validationDisplay = "block";
            StateHasChanged();

            Log.Error(e, "Exception adding new map page from modal");

            return;
        }

        var page = new MapPage()
        {
            Id = Guid.Empty.ToString(),
            Name = Name,
            FK_Section = parentId,
            Enabled = true,
            Image = imageId.ToString(),
            Link = $"{parentId}/"
        };

        ModalService.Close(ModalResult.Ok(page));
    }

    async Task FileChosen(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();
        if (file == null)
        {
            return;
        }
        else if (file.Size > MaxFileSize)
        {
            status = $"File too large. Max size: {MB} MB.";
        }
        else if (!supportedImageTypes.Contains(file.Type))
        {
            status = $"{file.Type} is not a supported format.";
        }
        else
        {
            selectedFile = file;
            status = selectedFile.Name;
        }
    }

    private async Task TryParseFile(Guid imageId)
    {
        status = "Saving ...";

        var extension = $".{selectedFile.Type[Range.StartAt(6)]}";

        using var reader = new StreamReader(selectedFile.Data);
        await using var ms = new MemoryStream();
        await reader.BaseStream.CopyToAsync(ms);
        await FileHandlerService.SaveFile(ms, imageId, extension, FileType.Map);
    }
}
