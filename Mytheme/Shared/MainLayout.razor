@using BlazorTypography
@using Mytheme.Models
@using Mytheme.Services
@using Mytheme.Services.Interfaces
@inherits LayoutComponentBase

@inject SvgHelperService SvgHelperService
@inject NavigationManager NavigationManager
@inject BreadcrumbService BreadcrumbService

@inject IStyled Styled
@inject ITypography Typography
@inject ISectionService SectionService
<!--
Colors
    pale gold - #C0B283
    silk - #DCD0C0
    paper - #F4F4F4
    charcoal - #373737
-->
<Styled>
    html {
    color: {colors.text-color};
    }
    body {
    background-color: {colors.background-color};
    color: {colors.text-color};
    }
    p {
    color: {colors.text-color};
    }
    hr {
    background-color: {colors.hr};
    }
</Styled>

<Styled>
    input[type=text] {
    width: 100%;
    padding: 12px 20px;
    margin: 8px 0;
    display: block;
    border: 1px solid #ccc;
    border-radius: 4px;
    box-sizing: border-box;
    }

    textarea {
    width: 100%;
    padding: 12px 20px;
    margin: 8px 0;
    display: block;
    border: 1px solid #ccc;
    border-radius: 4px;
    box-sizing: border-box;
    }
</Styled>



<Styled @bind-Classname="@searchPanel">

    height: 100%;
    width: @searchWidth;
    position: fixed;
    z-index: 2000;
    top: 0;
    right: 0;
    background-color: #111;
    overflow-x: hidden;
    padding-top: 60px;
    transition: 0.5s;

    & a {
    padding: 8px 8px 8px 32px;
    text-decoration: none;
    font-size: 25px;
    color: #818181;
    display: block;
    white-space: nowrap;
    text-overflow: ellipsis;
    overflow: hidden;
    transition: 0.3s;
    }

    & a:hover {
    color: #f1f1f1;
    }
</Styled>



<Styled @bind-Classname="@topNav">
    width: 100%;
    background-color: #373737;
    overflow: auto;
    position: fixed;
    top: 0;
    z-index: 2010;
</Styled>

<Styled @bind-Classname="@topNavBody">
    height: 58px;
    width: 100%;
    display: flex;
    flex-wrap: nowrap;
</Styled>

<Styled @bind-Classname="@topNavTitle">
    margin: 0;
    flex-grow: 1;
    height: 100%;
    padding: 12px;
    color: white;
    text-decoration: none;
    font-size: 24px;
</Styled>

<Styled @bind-Classname="@topNavButton">
    width: 58px;
    height: 100%;
    padding: 12px;
    & a:hover {
    background-color: #111;
    }
</Styled>


<Styled @bind-Classname="@topNavComponents">
    margin: 0;
    float: left;
    padding: 12px;
    color: white;
    text-decoration: none;
    font-size: 24px;

    & a:hover {
    background-color: #000;
    }
</Styled>

<Styled Classname="@topNav" MediaQuery="MediaQueries.LargerThanTablet">
    a {
    float: none;
    display: block;
    }
</Styled>

<Styled @bind-Classname="@mainView">
    display: flex;
    flex-direction: row;
    box-sizing: border-box;
    width: 100%;
    height: 100%;
    padding: 58px 0px 0px;
</Styled>

<Styled @bind-Classname="@sideNav">

    height: 100%;
    width: @navWidth;
    background-color: #111;
    overflow-x: hidden;
    transition: 0.5s;

    & a {
    padding: 8px 8px 8px 32px;
    text-decoration: none;
    font-size: 25px;
    color: #818181;
    display: block;
    white-space: nowrap;
    text-overflow: ellipsis;
    overflow: hidden;
    transition: 0.3s;
    }

    & a:hover {
    color: #f1f1f1;
    }
</Styled>


<Styled @bind-Classname="@navFlexRoot">
    height: 100%;
    display: flex;
    flex-direction: column;
</Styled>

<Styled @bind-Classname="@navHome">
    height: 48px;
</Styled>

<Styled @bind-Classname="@navIndex">
    flex-grow: 1;
    background: linen;
    overflow-y: auto;
    font-size: 20px;
    font-weight: bold;
</Styled>

<Styled @bind-Classname="@navIndexHeader">
    padding: 7px;
    font-size: 26px;
    cursor: pointer;
</Styled>

<Styled Classname="@navIndexHeader" PseudoClass="PseudoClasses.Hover">
    color: grey;
</Styled>

<Styled @bind-Classname="@mgmtHeader">
    height: 48px;
</Styled>


<Styled @bind-Classname="@mgmtSection">
    height: 200px;
    display: @mgmtSectionDisplay;
    background: linen;
</Styled>


<Styled @bind-Classname="@mainContent">
    flex-grow: 1;
    padding: 0px 20px 20px;
</Styled>


<Modal></Modal>



<div class="@topNav">
    <div class="@topNavBody">
        <a @onclick="ToggleNav" class="@topNavButton">@SvgHelperService.GetImage(SvgName.Menu, 26, "white")</a>
        <p class="@topNavTitle">@breadCrumb</p>
        @foreach (var btn in BreadcrumbService.NavBarButtons)
        {
            <a @onclick="@btn.CallBack" class="@topNavButton tooltip">@SvgHelperService.GetImage(btn.Image, 26, "white")<span class="tooltiptext">@btn.Name</span></a>
        }
        <a @onclick="ToggleSearchPanel" class="@topNavButton tooltip">@SvgHelperService.GetImage(SvgName.Search, 26, "white")<span class="tooltiptext">Search</span></a>
    </div>
</div>

<div class="@searchPanel">
    <a href="#">Home</a>
</div>

<div class="@mainView">
    <div class="@sideNav">
        <div class="@navFlexRoot">
            <div class="@navHome">
                <a href="#">Home</a>
            </div>
            <div class="@navIndex">
                <div class="@navIndexHeader" @onclick="@(() => NavigateToCampaign(campaignLink.Link.ToString()))">@campaignLabel</div>
                <TreeView Directories="@index" OnNavigation="NavigateToLink"></TreeView>
            </div>
            <div class="@mgmtHeader">
                <a @onclick="ToggleAppManagement">App Management</a>
            </div>
            <div class="@mgmtSection">
                <a href="tables">Tables</a>
                <a href="templates">Templates</a>
                <a href="imageloader">Image Loader</a>
            </div>
        </div>
    </div>
    <div class="@mainContent">
        @Body
    </div>
</div>


@code {
    private string topNav, topNavBody, topNavTitle, topNavButton, topNavComponents, sideNav, searchPanel, mainView;

    private string navFlexRoot, navHome, navIndex, navIndexHeader, mainContent;

    private string mgmtHeader, mgmtSection;

    private string mgmtSectionDisplay = "none";

    private string navWidth = "0px";
    private string searchWidth = "0px";
    private string breadCrumb = "";

    private bool navOpen;
    private bool searchOpen;
    private bool mgmtSectionOpen;


    private string campaignLabel;
    private NavigationLink campaignLink;

    private List<Directory> index = new List<Directory>();

    protected  delegate void OnBracketLink(string link);

    private static event OnBracketLink OnBracketLinkOccured;

    [JSInvokable]
    public static void BracketLinkInterop(string link)
    {
        OnBracketLinkOccured?.Invoke(link);
    }

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += LocationChanged;
        BreadcrumbService.OnBreadCrumbChange += UpdateBreadCrumb;
        BreadcrumbService.OnNavbarButtonChange += UpdateNavbarButtons;
        BreadcrumbService.OnCampaignSelected += CampaignSelected;

#pragma warning disable 4014

        OnBracketLinkOccured  += async delegate(string link)
        {
            await InvokeAsync(async () =>
            {
                await NavigateToLink(ParseLink(link));
            });
        };

#pragma warning restore 4014

        var theme = new BlazorTypography.Themes.Stardust();
        Typography.ApplyTypography(theme);

        //Setup default theme
        Styled.SetThemeValue("colors.background-color", "#F4F4F4");
        Styled.SetThemeValue("colors.brand", "#727D71");
        Styled.SetThemeValue("colors.link-color", "#974442");
        Styled.SetThemeValue("colors.link-active-color", "#727D71");
        Styled.SetThemeValue("colors.text-color", "#333333");
        Styled.SetThemeValue("colors.code-background", "#DCD0C0");
        Styled.SetThemeValue("colors.code-text", "#373737");
        Styled.SetThemeValue("colors.hr", "#974442");

        campaignLabel = "";
        index.Clear();
    }

    private async void CampaignSelected(string id)
    {
        var result = await SectionService.GetCampaignDirectory(Guid.Parse(id));

        if (result.IsSuccess)
        {
            campaignLabel = result.Result.Header.Name;
            campaignLink = result.Result.Header.Link;
            index.Clear();
            index.AddRange(result.Result.Directories);
        }
    }

    private void UpdateBreadCrumb(string text)
    {
        breadCrumb = text;
        StateHasChanged();
    }

    private void UpdateNavbarButtons()
    {
        StateHasChanged();
    }

    protected void ToggleNav()
    {
        if (navOpen)
        {
            navWidth = "0px";
            navOpen = false;

            mgmtSectionDisplay = "none";
            mgmtSectionOpen = false;
        }
        else
        {
            navWidth = "280px";
            navOpen = true;

            if (searchOpen)
            {
                searchWidth = "0px";
                searchOpen = false;
            }
        }
    }

    protected void ToggleSearchPanel()
    {
        if (searchOpen)
        {
            searchWidth = "0px";
            searchOpen = false;
        }
        else
        {
            searchWidth = "260px";
            searchOpen = true;

            if (navOpen)
            {
                navWidth = "0px";
                navOpen = false;
            }
        }
    }

    protected void ToggleAppManagement()
    {
        if (mgmtSectionOpen)
        {
            mgmtSectionDisplay = "none";
            mgmtSectionOpen = false;
        }
        else
        {
            mgmtSectionDisplay = "block";
            mgmtSectionOpen = true;
        }
    }

    private void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        navWidth = "0px";
        navOpen = false;
        mgmtSectionDisplay = "none";
        mgmtSectionOpen = false;
        StateHasChanged();
    }

    private void NavigateToCampaign(string id)
    {
        NavigationManager.NavigateTo($"campaign/{id}", true);
    }

    private NavigationLink ParseLink(string link)
    {
        try
        {
            if (link.Contains(":"))
            {
                var parts = link.Split(":");
                return new NavigationLink(Guid.Parse(parts[1]), Enum.Parse<ViewType>(parts[0], true));
            }

            return new NavigationLink(link);
        }
        catch (Exception ex)
        {
            //yum
            return null;
        }
    }


    private async Task NavigateToLink(NavigationLink link)
    {
        if (link != null)
        {
            BreadcrumbService.Navigate(link);
        }
    }
}
