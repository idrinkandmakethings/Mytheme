@using BlazorTypography
@using Mytheme.Services
@inherits LayoutComponentBase

@inject SvgHelperService SvgHelperService
@inject NavigationManager NavigationManager
@inject BreadcrumbService BreadcrumbService

@inject IStyled Styled
@inject ITypography Typography
<!--
Colors
    pale gold - #C0B283
    silk - #DCD0C0
    paper - #F4F4F4
    charcoal - #373737
-->
    <Styled>
        html {
        color: {colors.text-color};
        }
        body {
        background-color: {colors.background-color};
        color: {colors.text-color};
        }
        p {
        color: {colors.text-color};
        }
        hr {
        background-color: {colors.hr};
        }
    </Styled>

<Styled>
    input[type=text] {
    width: 100%;
    padding: 12px 20px;
    margin: 8px 0;
    display: block;
    border: 1px solid #ccc;
    border-radius: 4px;
    box-sizing: border-box;
    }

    textarea {
    width: 100%;
    padding: 12px 20px;
    margin: 8px 0;
    display: block;
    border: 1px solid #ccc;
    border-radius: 4px;
    box-sizing: border-box;
    }
</Styled>


<Styled @bind-Classname="@sideNav">

    height: 100%;
    width: @navWidth;
    position: fixed;
    z-index: 2000;
    top: 0;
    left: 0;
    background-color: #111;
    overflow-x: hidden;
    padding-top: 60px;
    transition: 0.5s;

    & a {
    padding: 8px 8px 8px 32px;
    text-decoration: none;
    font-size: 25px;
    color: #818181;
    display: block;
    white-space: nowrap;
    text-overflow: ellipsis;
    overflow: hidden;
    transition: 0.3s;
    }

    & a:hover {
    color: #f1f1f1;
    }

    & .closeBtn{
    padding: 8px 8px 8px 32px;
    font-size: 25px;
    color: #818181;
    display: block;
    white-space: nowrap;
    position: absolute;
    font-weight: bold;
    cursor: pointer;
    top: 0;
    right: 25px;
    font-size: 36px;
    margin-left: 50px;
    }
</Styled>


<Styled @bind-Classname="@topNav">
    width: 100%;
    background-color: #373737;
    overflow: auto;
    position: fixed;
    top: 0;
    z-index: 2010;
</Styled>

<Styled @bind-Classname="@topNavBody">
    height: 58px;
    width: 100%;
    display: flex;
    flex-wrap: nowrap;
</Styled>

<Styled @bind-Classname="@topNavTitle">
    margin: 0;
    flex-grow: 1;
    height: 100%;
    padding: 12px;
    color: white;
    text-decoration: none;
    font-size: 24px;
</Styled>

<Styled @bind-Classname="@topNavButton">
    width: 58px;
    height: 100%;
    padding: 12px;
    & a:hover {
    background-color: #111;
    }
</Styled>


<Styled @bind-Classname="@topNavComponents">
    margin: 0;
    float: left;
    padding: 12px;
    color: white;
    text-decoration: none;
    font-size: 24px;

    & a:hover {
    background-color: #000;
    }
</Styled>

<Styled Classname="@topNav" MediaQuery="MediaQueries.LargerThanTablet">
    a {
    float: none;
    display: block;
    }
</Styled>

<Styled @bind-Classname="@mainView">
    position: relative;
    width: 100%;
    height: 100vh;
    padding: 70px 20px 30px;
</Styled>

<Modal></Modal>

<div class="@sideNav">
    <span class="closeBtn">&times;</span>
    <a href="#">Home</a>
    <a href="tables">Tables</a>
    <a href="templates">Templates</a>
    <a href="maptest">Map Test</a>
    <a href="imageloader">Image Loader</a>
</div>

<div class="@topNav">
    <div class="@topNavBody">
        <a @onclick="ToggleNav" class="@topNavButton">@SvgHelperService.GetImage(SvgName.Menu, 26, "white")</a>
        <p class="@topNavTitle">@breadCrumb</p>
        @foreach (var btn in BreadcrumbService.NavBarButtons)
        {
            <a @onclick="@btn.CallBack" class="@topNavButton tooltip">@SvgHelperService.GetImage(btn.Image, 26, "white")<span class="tooltiptext">@btn.Name</span></a>
        }
    </div>

</div>


<div class="@mainView">
    @Body
</div>


@code {
    private string topNav, topNavBody, topNavTitle, topNavButton, topNavComponents, sideNav, mainView;
    private string navWidth = "0px";
    private string breadCrumb = "";

    private bool navOpen;

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += LocationChanged;
        BreadcrumbService.OnBreadCrumbChange += UpdateBreadCrumb;
        BreadcrumbService.OnNavbarButtonChange += UpdateNavbarButtons;

        var theme = new BlazorTypography.Themes.Stardust();
        Typography.ApplyTypography(theme);

        //Setup default theme
        Styled.SetThemeValue("colors.background-color", "#F4F4F4");
        Styled.SetThemeValue("colors.brand", "#727D71");
        Styled.SetThemeValue("colors.link-color", "#974442");
        Styled.SetThemeValue("colors.link-active-color", "#727D71");
        Styled.SetThemeValue("colors.text-color", "#333333");
        Styled.SetThemeValue("colors.code-background", "#DCD0C0");
        Styled.SetThemeValue("colors.code-text", "#373737");
        Styled.SetThemeValue("colors.hr", "#974442");
    }

    private void UpdateBreadCrumb(string text)
    {
        breadCrumb = text;
        StateHasChanged();
    }

    private void UpdateNavbarButtons()
    {
        StateHasChanged();
    }

    protected void ToggleNav()
    {
        if (navOpen)
        {
            navWidth = "0px";
            navOpen = false;
        }
        else
        {
            navWidth = "260px";
            navOpen = true;
        }
        //StateHasChanged();
    }


    private void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        navWidth = "0px";
        navOpen = false;
        StateHasChanged();
    }
}
