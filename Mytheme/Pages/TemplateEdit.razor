@page "/edit-template"
@page "/edit-template/{templateId}"

@using Mytheme.Dal.Dto
@using Mytheme.Data
@using Mytheme.Modals

@inject TemplateService TemplateService
@inject IModalService ModalService
@inject BreadcrumbService BreadcrumbService


<Styled>
    input[type=text] {
    width: 100%;
    padding: 12px 20px;
    margin: 8px 0;
    display: block;
    border: 1px solid #ccc;
    border-radius: 4px;
    box-sizing: border-box;
    }

    label {
    width: 100%;
    margin: 8px 0;
    display: block;
    }

    textarea {
    width: 100%;
    padding: 12px 20px;
    margin: 8px 0;
    display: block;
    border: 1px solid #ccc;
    border-radius: 4px;
    box-sizing: border-box;
    }
</Styled>

<Styled @bind-Classname="@form">
    display:block;0
    margin-bottom: 10px;
</Styled>


<Styled @bind-Classname="@loading">
    align: center;
    color: black;
</Styled>


<EditForm Model="@template" class="@form" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <label for="name">Name: </label>
    <InputText id="name" @bind-Value="template.Name" />

    <label for="category">Category: </label>
    <div>
        <InputSelect id="classification" @bind-Value="template.Category">
            <option value="">@categoryText</option>
            @foreach (var cat in categories)
            {
                <option value="@cat">@cat</option>
            }
        </InputSelect>
        <button type="button" class="btn btn-primary" @onclick="@OpenCategoryModal">+</button>
    </div>

    <label for="desc">Description: </label>
    <InputTextArea id="desc" @bind-Value="template.Description"></InputTextArea>

    <InputTextArea id="desc" @bind-Value="template.TemplateBody"></InputTextArea>

    <button type="Submit" class="btn btn-primary">Save Table</button>
</EditForm>



@code {

    [Parameter]
    public int TemplateId { get; set; }
    
    // css class names
    private string form, loading;
    
    private bool isUpdate;
    
    private string categoryText = "Loading...";
    private string loadingText = "";

   List<string> categories = new List<string>();

    Template template = new Template();

    protected override async Task OnInitializedAsync()
    {
        if (TemplateId == 0)
        {
            BreadcrumbService.SetBreadCrumb("Add Template");
            isUpdate = false;
        }
        else
        {
            isUpdate = true;
            var result = await TemplateService.GetTemplate(TemplateId);
            if (result.IsSuccess)
            {
                template = result.Result;
            }
        }
        
        var catResult = await TemplateService.GetCategories();

        if (catResult.IsSuccess)
        {
            categories = catResult.Result;
        }

        categoryText = "Select category ...";
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool isFirstRender)
    {
        if (isFirstRender)
        {
            dropReference = FileReaderService.CreateReference(dropTargetElement);
            await dropReference.RegisterDropEventsAsync();
        }
    }

    protected void OpenCategoryModal()
    {
        ModalService.OnClose += OnModalClosed;
        ModalService.Show<AddCategoryModal>("Add Category", null,
            new ModalOptions
            {
                HeaderColor = "white",
                HeaderBackgroundColor = "black",
                PixelWidth = 360
            });
    }

    private void OnModalClosed(ModalResult result)
    {
        if (!result.Cancelled)
        {
            try
            {
                categories.Add((string)result.Data);
                categories.Sort();
                StateHasChanged();
            }
            catch
            {
                //nom nom
            }
        }

        ModalService.OnClose -= OnModalClosed;
    }

    protected async Task HandleValidSubmit()
    {
        await SaveTable();
    }

    protected async Task SaveTable()
    {
        table.Entries = entries.Select(e => new TableEntry() { Entry = e }).ToList();


        if (isUpdate)
        {
            var result = await RandomTableService.UpdateRandomTable(table);

            if (result.IsSuccess)
            {
                loadingText = "Updated!";
            }
            else
            {
                loadingText = result.Message;
            }
        }
        else
        {
            var result = await RandomTableService.AddRandomTable(table);

            if (result.IsSuccess)
            {
                loadingText = "Saved!";
                table = new RandomTable();
                entries = null;
            }
            else
            {
                loadingText = result.Message;
            }
        }
    }


}
