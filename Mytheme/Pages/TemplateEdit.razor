@page "/edit-template"
@page "/edit-template/{templateId}"

@using Mytheme.Dal.Dto
@using Mytheme.Modals
@using Mytheme.Services
@using Mytheme.Services.Interfaces

@inject ITemplateService TemplateService
@inject IModalService ModalService
@inject BreadcrumbService BreadcrumbService


<Styled>
    input[type=text] {
    width: 100%;
    padding: 8px
    display: block;
    border: 1px solid #ccc;
    border-radius: 4px;
    box-sizing: border-box;
    }

    label {
    float: left;
    width: 10em;
    margin-right: 1em;
    }

    textarea {
    width: 100%;
    padding: 8px;
    display: block;
    border: 1px solid #ccc;
    border-radius: 4px;
    box-sizing: border-box;
    }
</Styled>

<Styled @bind-Classname="@form">
    display:block;
</Styled>

<Styled @bind-Classname="@name">
    margin: 4px 0px;
</Styled>

<Styled @bind-Classname="@categoryDiv">
    margin: 4px 0px;
</Styled>

<Styled @bind-Classname="@description">
    resize: none;
    margin: 4px 0px 8px 0px;
</Styled>



<Styled @bind-Classname="@loading">
    align: center;
    color: black;
</Styled>


<EditForm Model="@template" class="@form" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <InputText class="@name" placeholder="Template Name" @bind-Value="template.Name" />

    <div class="@categoryDiv">
        <InputSelect id="classification" @bind-Value="template.Category">
            <option value="">@categoryText</option>
            @foreach (var cat in categories)
            {
                <option value="@cat">@cat</option>
            }
        </InputSelect>
        <button type="button" class="btn btn-primary" @onclick="@OpenCategoryModal">+</button>
    </div>

    <InputTextArea class="@description" placeholder="Description" @bind-Value="template.Description"></InputTextArea>

        <TabbedMarkdownEditor Content="@Content" PercentHeight="60"></TabbedMarkdownEditor>
        <button type="Submit" class="btn btn-primary">Save Table</button>
</EditForm>






@code {

    [Parameter]
    public string TemplateId { get; set; }

    public string Content { get; set; }

    // css class names
    private string form, loading, name, description, categoryDiv;

    private bool isUpdate;

    private string categoryText = "Loading...";
    private string loadingText = "";

    List<string> categories = new List<string>();

    Template template = new Template();

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(TemplateId))
        {
            BreadcrumbService.SetBreadCrumb("Add Template");
            isUpdate = false;
        }
        else
        {
            isUpdate = true;
            var result = await TemplateService.GetTemplate(TemplateId);
            if (result.IsSuccess)
            {
                template = result.Result;
            }
        }

        var catResult = await TemplateService.GetCategories();

        if (catResult.IsSuccess)
        {
            categories = catResult.Result;
        }

        categoryText = "Select category ...";
        StateHasChanged();
    }


    protected void OpenCategoryModal()
    {
        ModalService.Show<AddCategoryModal>("Add Category", null,
            new ModalOptions
            {
                HeaderColor = "white",
                HeaderBackgroundColor = "black",
                PixelWidth = 360
            },
            OnModalClosed);
    }

    private void OnModalClosed(ModalResult result)
    {
        if (!result.Cancelled)
        {
            try
            {
                categories.Add((string)result.Data);
                categories.Sort();
                StateHasChanged();
            }
            catch
            {
                //nom nom
            }
        }
    }

    protected async Task HandleValidSubmit()
    {
        await SaveTemplate();
    }

    protected async Task SaveTemplate()
    {
        //TODO: Add Template validation

        if (isUpdate)
        {


            var result = await TemplateService.UpdateTemplate(template);

            if (result.IsSuccess)
            {
                loadingText = "Updated!";
            }
            else
            {
                loadingText = result.Message;
            }
        }
        else
        {
            var result = await TemplateService.AddTemplate(template);

            if (result.IsSuccess)
            {
                loadingText = "Saved!";
            }
            else
            {
                loadingText = result.Message;
            }
        }
    }


}
