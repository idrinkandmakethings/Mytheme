@page "/edit-template"
@page "/edit-template/{templateId}"
@using System.Text
@using Mytheme.Data.Dto
@using Mytheme.Modals
@using Mytheme.Models
@using Mytheme.Services
@using Mytheme.Services.Interfaces
@using Mytheme.Templating

@implements IDisposable
@inject ITemplateService TemplateService
@inject IRandomTableService RandomTableService
@inject IModalService ModalService
@inject BreadcrumbService BreadcrumbService
@inject NavigationManager NavigationManager


<Styled>
    input[type=text] {
    width: 100%;
    padding: 8px
    display: block;
    border: 1px solid #ccc;
    border-radius: 4px;
    box-sizing: border-box;
    }

    label {
    float: left;
    width: 10em;
    margin-right: 1em;
    }

    textarea {
    width: 100%;
    padding: 8px;
    display: block;
    border: 1px solid #ccc;
    border-radius: 4px;
    box-sizing: border-box;
    }
</Styled>

<Styled @bind-Classname="@form">
    display:block;
</Styled>

<Styled @bind-Classname="@name">
    margin: 4px 0px;
</Styled>

<Styled @bind-Classname="@categoryDiv">
    margin: 4px 0px;
</Styled>

<Styled @bind-Classname="@description">
    resize: none;
    margin: 4px 0px 8px 0px;
</Styled>



<Styled @bind-Classname="@loading">
    align: center;
    color: black;
</Styled>


<EditForm Model="@template" class="@form">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <InputText class="@name" placeholder="Template Name" @bind-Value="template.Name" />

    <div class="@categoryDiv">
        <InputSelect id="classification" @bind-Value="template.Category">
            <option value="">@categoryText</option>
            @foreach (var cat in categories)
            {
                <option value="@cat">@cat</option>
            }
        </InputSelect>
        <button type="button" class="btn btn-primary" @onclick="@OpenCategoryModal">+</button>
    </div>

    <InputTextArea class="@description" placeholder="Description" @bind-Value="template.Description"></InputTextArea>

        <TabbedMarkdownEditor Content="@Content" PercentHeight="60" @ref="@markdown"></TabbedMarkdownEditor>
</EditForm>


@code {

    [Parameter]
    public string TemplateId { get; set; }

    public string Content { get; set; }

    // css class names
    private string form, loading, name, description, categoryDiv;

    private TabbedMarkdownEditor markdown;
    private TemplateValidator validator;

    private bool isUpdate;

    private string categoryText = "Loading...";
    private string loadingText = "";

    List<string> categories = new List<string>();

    Template template = new Template();

    protected override async Task OnInitializedAsync()
    {
        validator = new TemplateValidator(RandomTableService, TemplateService);

        BreadcrumbService.OnNavigateToLink += HandleNavBack;

        var buttons = new List<NavBarButton>();

        buttons.Add(new NavBarButton("Save Table", SvgName.Save, PreSaveValidation));
        buttons.Add(new NavBarButton("Delete Table", SvgName.Delete, DeleteTemplate));

        BreadcrumbService.SetNavBarButtons(buttons);

        if (string.IsNullOrEmpty(TemplateId))
        {
            BreadcrumbService.SetBreadCrumb("Add Template",  new NavigationLink(Guid.Empty, ViewType.None), false);
            isUpdate = false;
        }
        else
        {
            isUpdate = true;
            var result = await TemplateService.GetTemplate(Guid.Parse(TemplateId));
            if (result.IsSuccess)
            {
                template = result.Result;
                Content = template.TemplateBody;
                BreadcrumbService.SetBreadCrumb(template.Name, new NavigationLink(Guid.Empty, ViewType.None), false);
            }
        }

        var catResult = await TemplateService.GetCategories();

        if (catResult.IsSuccess)
        {
            categories = catResult.Result;
        }

        categoryText = "Select category ...";
        StateHasChanged();
    }


    protected void OpenCategoryModal()
    {   var p = new ModalParameters();
        p.Add("type", "template");

        ModalService.Show<AddCategoryModal>("Add Category", p,
            new ModalOptions
            {
                HeaderColor = "white",
                HeaderBackgroundColor = "black",
                PixelWidth = 360
            },
            OnModalClosed);
    }

    private void OnModalClosed(ModalResult result)
    {
        if (!result.Cancelled)
        {
            try
            {
                categories.Add((string)result.Data);
                categories.Sort();
                StateHasChanged();
            }
            catch
            {
                //nom nom
            }
        }
    }


    protected async void PreSaveValidation()
    {
        template.TemplateBody = markdown.Content;

        var validation = await validator.ValidateTemplate(template);

        if (validation.ValidationErrors.Count == 0)
        {
            await SaveTemplate();
        }
        else
        {
            var sb = new StringBuilder();

            foreach (var key in validation.ValidationErrors.Keys)
            {
                sb.AppendLine($"{key}:{validation.ValidationErrors[key]}");
            }
            ModalService.ShowInfoModal("Invalid Template Fields", sb.ToString());
        }
    }

    protected async Task SaveTemplate()
    {
        if (isUpdate)
        {
            var result = await TemplateService.UpdateTemplate(template);

            if (result.IsSuccess)
            {
                loadingText = "Updated!";
            }
            else
            {
                loadingText = result.Message;
            }
        }
        else
        {
            var result = await TemplateService.AddTemplate(template);

            if (result.IsSuccess)
            {
                loadingText = "Saved!";
                BreadcrumbService.SetBreadCrumb(template.Name, new NavigationLink(Guid.Empty, ViewType.None), false);
            }
            else
            {
                loadingText = result.Message;
            }
        }
    }

    private async void DeleteTemplate()
    {
        ModalService.ShowInfoModal($"Not Implemented", "Need moar code, dummy.");
    }

    private void HandleNavBack(NavigationLink link)
    {
        NavigationManager.NavigateTo( "templates", true);
    }

    public void Dispose()
    {
        BreadcrumbService.OnNavigateToLink -= HandleNavBack;
    }
}
