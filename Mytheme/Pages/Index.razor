@page "/"
@using Mytheme.Data.Dto
@using Mytheme.Models
@using Mytheme.Services
@using Mytheme.Services.Interfaces

@inject BreadcrumbService BreadcrumbService
@inject NavigationManager NavigationManager
@inject ISectionService SectionService


<Styled @bind-Classname="@container">
    display: flex;
    flex-direction: column;
    box-sizing: border-box;
    width: 100%;
    height: 100%;
</Styled>


<Styled @bind-Classname="@title">
    height: 30%;
    width: 100%;
</Styled>

<Styled @bind-Classname="@subTitle">
    @@media screen and (max-height: 520px){
    display: none;
    }
</Styled>

<Styled @bind-Classname="@campaignSelector">
    flex-grow: 1;
    width: 100%;
</Styled>

<div class="@container">
    <div class="@title">
        <h1>Mytheme</h1>
        <p class="@subTitle">/ˈmɪθiːm/ (noun) a set of fundamental generic units of narrative structure from which myths are thought to be constructed.</p>
    </div>
    <div class="@campaignSelector">
        @if (campaigns != null)
        {
            <Grid Items="campaigns" Context="campaign">
                <GridHeader>
                    <th>Name</th>
                    <th>Description</th>
                    <th>Created</th>
                </GridHeader>
                <GridRow>
                    <tr @onclick="@(() => CampaignSelected(campaign.Id.ToString()))">
                        <td>@campaign.Name</td>
                        <td>@campaign.Description</td>
                        <td>@campaign.DateCreated.ToShortDateString()</td>
                    </tr>
                </GridRow>
            </Grid>
        }
        else
        {
            <div>
                Loading...
            </div>
        }
    </div>
</div>

@code
{
    private string container, title, subTitle, campaignSelector, row, columnLeft, columnRight;

    private Section[] campaigns;



    protected override async Task OnInitializedAsync()
    {
        var result = await SectionService.GetAllCampaignsAsync();

        campaigns = result.Result;

        BreadcrumbService.SetBreadCrumb("", new NavigationLink(Guid.Empty, ViewType.None), false);
        BreadcrumbService.ClearHistory();

        var buttons = new List<NavBarButton>();

        buttons.Add(new NavBarButton("New Campaign", SvgName.Add, NewCampaign));
        
        BreadcrumbService.SetNavBarButtons(buttons);
    }

    protected void CampaignSelected(string id)
    {
        NavigationManager.NavigateTo($"campaign/{id}");
    }

    protected void NewCampaign()
    {
        NavigationManager.NavigateTo($"campaign");
    }

}
