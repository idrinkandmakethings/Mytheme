@page "/mappage/{parent}"
@page "/mappage/{parent}/{id}"
@using Mytheme.Data
@using Mytheme.Data.Dto
@using Mytheme.Map.Models
@using Mytheme.Modals
@using Mytheme.Services
@using Mytheme.Services.Interfaces
@using Serilog

@inject IFileHandlerService FileHandlerService

@inject BreadcrumbService BreadcrumbService
@inject NavigationManager NavigationManager
@inject SvgHelperService SvgHelperService
@inject IJSRuntime JsRuntime
@inject IModalService ModalService
@inject IMapService MapService


<Styled @bind-Classname="@mapStyle">
    position: relative;
    width: 100%;
    height: 100%;
</Styled>

    <div class="@mapStyle">
        <LeafletMap OnMarkerAdded="MarkerAdded" @ref="@mapView"></LeafletMap>
    </div>


@code {

    private string mapStyle;

    private MapPage mapPage;


    MapImage map;
    LeafletMap mapView;

    [Parameter]
    public string Parent { get; set; }

    [Parameter]
    public string Id { get; set; }

    protected override async Task OnInitializedAsync()
    {

        if (!string.IsNullOrEmpty(Id))
        {
            var result = await MapService.GetMapPageAsync(Guid.Parse(Id));

            if (result.IsSuccess)
            {
                mapPage = result.Result;

                BreadcrumbService.SetBreadCrumb(mapPage.Name, mapPage.Link, true);
            }
        }
        else
        {
            BreadcrumbService.SetBreadCrumb($"New Map", "", true);

            OpenNewMapPageModal();
        }

        SetNavBarButtons();
    }


    protected override async Task OnParametersSetAsync()
    {
        if (mapPage != null)
        {
            await LoadMap();
        }
    }

    private async Task LoadMap()
    {
        var result = await FileHandlerService.GetMapImage(mapPage.Image);

        map = result;

        await mapView.InitializeMap(map);

        foreach (var marker in mapPage.MapMarkers)
        {
            await mapView.AddMarker(marker.ToLeafletMarker());
        }
    }

    private void SetNavBarButtons()
    {

        var buttons = new List<NavBarButton>();

        buttons.Add(new NavBarButton("Save", SvgName.Save, SaveMapPage));
        buttons.Add(new NavBarButton("Delete", SvgName.Delete, ShowDeleteModal));

        BreadcrumbService.SetNavBarButtons(buttons);
    }

    private async void MarkerAdded(Coordinate coord)
    {
        var p = new ModalParameters();
        p.Add("lat", coord.Latitude);
        p.Add("lon", coord.Longitude);
        p.Add("parent", mapPage.Id);

        ModalService.Show<AddMapMarkerModal>("Add Map Marker", p,
            new ModalOptions
            {
                HeaderColor = "white",
                HeaderBackgroundColor = "black",
                PixelWidth = 800,
                DisableBackgroundCancel = true
            }, OnMapMarkerModalClosed);
    }

    private async void SaveMapPage()
    {

        if (mapPage.Id == Guid.Empty)
        {
            var result = await MapService.AddMapPageAsync(mapPage);

            if (result.IsSuccess)
            {
                mapPage.Id = result.Result;

                BreadcrumbService.SetBreadCrumb(mapPage.Name, mapPage.Link, false);
            }
            else
            {
                ModalService.ShowInfoModal($"Error Saving Page", result.Message);
            }
        }
        else
        {
            var result = await MapService.UpdateMapPageAsync(mapPage);

            if (!result.IsSuccess)
            {
                ModalService.ShowInfoModal($"Error Saving Page", result.Message);
            }
        }
    }

    private void ShowDeleteModal()
    {

    }

    private async void DeleteMapPage()
    {

    }

    protected void OpenNewMapPageModal()
    {
        var p = new ModalParameters();
        p.Add("parent", Parent);

        ModalService.Show<AddNewMapPageModal>("Add New Map", p,
            new ModalOptions
            {
                HeaderColor = "white",
                HeaderBackgroundColor = "black",
                PixelWidth = 360,
                DisableBackgroundCancel = true
            }, OnModalClosed);
    }

    private async void OnModalClosed(ModalResult result)
    {
        if (!result.Cancelled)
        {
            try
            {
                mapPage = (MapPage) result.Data;
                SaveMapPage();
                await LoadMap();
            }
            catch (Exception e)
            {
                ModalService.ShowInfoModal($"Error", $"An unknown error occured.{Environment.NewLine}Msg:{e.Message}");
                Log.Error(e, "Exception initializing map page after modal creation");
            }
        }
        else
        {
            // TODO: go back in navigation...
        }
    }

    private async void OnMapMarkerModalClosed(ModalResult result)
    {
        if (!result.Cancelled)
        {
            try
            {
                var marker = (MapMarker) result.Data;

                mapPage.MapMarkers.Add(marker);

                var dalResult = await MapService.AddMarkerAsync(marker);

                marker.Id = dalResult.Result;

                await mapView.AddMarker(marker.ToLeafletMarker());

                SaveMapPage();
            }
            catch (Exception e)
            {
                ModalService.ShowInfoModal($"Error", $"An unknown error occured.{Environment.NewLine}Msg:{e.Message}");
                Log.Error(e, "Exception adding map marker.");
            }
        }
    }

}