
@using System.Text
@using System.Text.RegularExpressions
@using Mytheme.Data.Dto
@using Mytheme.Map.Models
@using Mytheme.Models
@using Mytheme.Services
@using Mytheme.Services.Interfaces
@using Serilog

@inject IFileHandlerService FileHandlerService
@inject SvgHelperService SvgHelperService
@inject BreadcrumbService BreadcrumbService
@inject IJSRuntime JsRuntime
@inject IModalService ModalService
@inject IMapService MapService


<Styled @bind-Classname="@modalContainer">
    display: @modalDisplay;
    position: absolute;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    z-index: 5000;
    align-items: center;
    justify-content: center;
    overflow: auto;
</Styled>


<Styled @bind-Classname="@modalBackground">
    display: block;
    position:absolute;
    width: 100%;
    height: 100%;
    z-index: 101;
    background-color: rgba(0,0,0,0.5);
</Styled>

<Styled @bind-Classname="@modalWrapper">
    z-index: 102;
    width: auto;
</Styled>

<Styled @bind-Classname="@modal">
    background-color: #fff;
    border-radius: 4px;
    border: 1px solid #000;
    box-shadow: 0 2px 2px rgba(0,0,0,.25);
    animation-name: @animateTop;
    animation-duration: 0.4s;
</Styled>

<Styled @bind-Classname="@animateTop" IsKeyframes="true">
    from {
    top:-300px;
    opacity:0;
    }
    to {
    top:0;
    opacity:1;
    }
</Styled>

<Styled @bind-Classname="@modalHeader">
    display: flex;
    align-items: flex-start;
    justify-content: space-between;
    padding: 20px;
    background-color: @titleBackground;

</Styled>

<Styled @bind-Classname="@modalTitle">
    color: @titleColor;
    margin-bottom: 0;
</Styled>

<Styled @bind-Classname="@modalClose">
    padding: 1rem;
    margin: -1rem -1rem -1rem auto;
    background-color: transparent;
    color: @titleColor;
    border: 0;
    -webkit-appearance: none;
    cursor: pointer;
    font-size: 1.5rem;
    font-weight: bold;
</Styled>

<Styled @bind-Classname="@modalContent">
    padding: 10px 20px 20px ;
</Styled>

<Styled @bind-Classname="@input">
    width: 100%;
</Styled>

<Styled @bind-Classname="@validationError">
    display: @validationDisplay;
    color: #8b0000;
</Styled>

<Styled @bind-Classname="@mapStyle">
    position: relative;
    width: 100%;
    height: 100%;
</Styled>

<div class="@modalContainer">
    <div class="@modalBackground" @onclick="HandleBackgroundClick"></div>
    <div class="@modalWrapper">
        <div class="@modal">
            <div class="@modalHeader">
                <h3 class="@modalTitle">Add Map Marker</h3>

                <button type="button" class="@modalClose" @onclick="@ModalCancel">
                    <span>&times;</span>
                </button>

            </div>
            <div class="@modalContent">
                <div>
                    <span class="@validationError">@errorMessage</span>
                    <input id="name" class="@input" placeholder="Name" @bind="@Name" />
                    <br />
                    <input id="link" class="@input" placeholder="Link" @bind="@Link" />
                    <textarea placeholder="Description" @bind="@Description"></textarea>
                    <div>
                        <button @onclick="@ModalCancel">Cancel</button>
                        <button @onclick="@HandleSubmit">Add</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<LeafletMap OnMarkerAdded="MarkerAdded" OnMarkerDeleted="MarkerDeleted" @ref="@mapView"></LeafletMap>


@code {

    #region Modal Stuff

    // css classes
    private string modalContainer, modalBackground, modalContent, modal, modalHeader, modalTitle, modalClose, modalWrapper, animateTop;


    // css properties
    private string modalDisplay = "none";
    private string titleBackground = "white";
    private string titleColor = "black";
    private string modalWidth = "80%";


    private string validationError, input;

    private string validationDisplay;
    private string errorMessage;

    private double lat;
    private double lon;

    public string Name { get; set; }
    public string Link { get; set; }
    public string Description { get; set; }

    private Regex linkRegex;

    protected void HandleBackgroundClick()
    {
        return;
    }

    #endregion

    private string mapStyle;

    MapImage map;
    LeafletMap mapView;

    [Parameter]
    public EventCallback<NavigationLink> OnNavigate { get; set; }

    [Parameter]
    public MapPage MapPage { get; set; }


    protected override void OnInitialized()
    {
        linkRegex = new Regex(@"\[\[(.*)\](\w+):([\w\d-]+)\]");
    }

    protected override async Task OnParametersSetAsync()
    {
        modalDisplay = "none";

        if (MapPage != null && MapPage?.Id != Guid.Empty)
        {
            await LoadMap();
        }
    }

    private async Task LoadMap()
    {
        var result = await FileHandlerService.GetMapImage(MapPage.Image);

        map = result;

        await mapView.InitializeMap(map);

        foreach (var marker in MapPage.MapMarkers)
        {
            await mapView.AddMarker(marker.ToLeafletMarker());
        }

        StateHasChanged();
    }

    public async Task Save()
    {
        var result = await MapService.UpdateMapPageAsync(MapPage);

        if (!result.IsSuccess)
        {
            ModalService.ShowInfoModal($"Error Saving Map Page", result.Message);
        }
        else
        {
            BreadcrumbService.RefreshIndex();
        }
    }

    private async void MarkerAdded(Coordinate coord)
    {
        lat = coord.Latitude;
        lon = coord.Longitude;

        modalDisplay = "flex";
    }

    private async void MarkerDeleted(string id)
    {
        Guid.TryParse(id, out var guid);

        MapPage.MapMarkers.RemoveAll(x => x.Id == guid);
        await Save();
    }

    private async void ModalCancel()
    {
        modalDisplay = "none";
    }

    private async Task HandleSubmit()
    {

        if (!ValidateInputs())
        {
            validationDisplay = "block";
            return;
        }

        var id = Guid.NewGuid();

        var marker = new MapMarker
        {
            Id = id,
            FK_MapPage = MapPage.Id,
            Name = Name,
            Content = SetContent(id),
            Lat = lat,
            Lon = lon
        };

        
        await OnMapMarkerModalClosed(marker);

        modalDisplay = "none";
    }

    private async Task OnMapMarkerModalClosed(MapMarker marker)
    {

        try
        {
            MapPage.MapMarkers.Add(marker);

            var dalResult = await MapService.AddMarkerAsync(marker);

            marker.Id = dalResult.Result;

            await mapView.AddMarker(marker.ToLeafletMarker());

            await Save();

            Name = "";
            Link = "";
            Description = "";
        }
        catch (Exception e)
        {
            ModalService.ShowInfoModal($"Error", $"An unknown error occured.{Environment.NewLine}Msg:{e.Message}");
            Log.Error(e, "Exception adding map marker.");
        }

    }


    private bool ValidateInputs()
    {
        var valid = true;

        var sb = new StringBuilder();

        if (string.IsNullOrEmpty(Name))
        {
            sb.AppendLine("Name cannot be blank.");
            valid = false;
        }

        if (string.IsNullOrEmpty(Link))
        {
            Link = "";
        }
        else
        {
            if (!linkRegex.IsMatch(Link))
            {
                sb.AppendLine("Link format is not valid");
                valid = false;
            }
        }

        if (Description == null)
        {
            Description = "";
        }

        errorMessage = sb.ToString();

        return valid;
    }

    private string SetContent(Guid id)
    {
        var sb = new StringBuilder();

        sb.Append($@"<div class=""scroll-popup"">");

        sb.Append($@"<p class=""title"">{Name}</p>");

        if (!string.IsNullOrEmpty(Link))
        {
            var match = linkRegex.Match(Link);
            if (match.Success)
            {
                sb.Append("<hr/>");
                sb.Append($@"<a tabindex=""0"" onclick=""bracketLink('{match.Groups[2].Value}:{match.Groups[3].Value}')"">{match.Groups[1].Value}</a>");
            }
        }

        if (!string.IsNullOrEmpty(Description))
        {
            sb.Append("<hr/>");
            sb.Append($"<p>{Description}</p>");
        }

        sb.Append($@"<button id=""btn-{id}"" class=""marker-delete-button"">{@SvgHelperService.GetImage(SvgName.Trash, 14, "darkgrey")}</button>");

        sb.Append("</div>");

        return sb.ToString();

    }
}