@page "/markdownpage/{parent}"
@page "/markdownpage/{parent}/{name}"
@using Mytheme.Data.Dto
@using Mytheme.Modals
@using Mytheme.Services
@using Mytheme.Services.Interfaces
@using Serilog


@inject BreadcrumbService BreadcrumbService
@inject NavigationManager NavigationManager
@inject SvgHelperService SvgHelperService
@inject IJSRuntime JsRuntime
@inject IModalService ModalService
@inject ISectionService SectionService


@if (_page != null)
{
    <TabbedMarkdownEditor OnSaveEdit="@SaveEdit" Content="@_page.Content" PercentHeight="90" @ref="@markdown"></TabbedMarkdownEditor>
}

@code {

    public string Content { get; set; }

    private Page _page;

    private TabbedMarkdownEditor markdown;

    [Parameter]
    public string Parent { get; set; }

    [Parameter]
    public string Name { get; set; }


    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(Name))
        {
            var result = await SectionService.GetPageByNameAsync(Guid.Parse(Parent), Name);

            if (result.IsSuccess)
            {
                _page = result.Result;

                BreadcrumbService.SetBreadCrumb(_page.Name, _page.Link, true);
            }
        }
        else
        {
            BreadcrumbService.SetBreadCrumb($"New Page", "", true);

            OpenNewPageModal();
        }

        StateHasChanged();
    }


    private async void NavigateToPage(string name)
    {

        var result = await SectionService.GetPageByNameAsync(Guid.Parse(Parent), name);

        if (result.IsSuccess)
        {
            _page = result.Result;

            BreadcrumbService.SetBreadCrumb(_page.Name, _page.Link, true);
        }

        StateHasChanged();
    }


    private async Task SaveEdit(string content)
    {
        _page.Content = content;

        SavePage();
    }

    private async void SavePage()
    {
        if (_page.Id == Guid.Empty)
        {
            var result = await  SectionService.AddPageAsync(_page);

            if (result.IsSuccess)
            {
                _page.Id = result.Result;

                BreadcrumbService.SetBreadCrumb(_page.Name, _page.Link, false);
            }
            else
            {
                ModalService.ShowInfoModal($"Error Saving Page", result.Message);
            }
        }
        else
        {
            var result = await SectionService.UpdatePageAsync(_page);
            if (!result.IsSuccess)
            {
                ModalService.ShowInfoModal($"Error Saving Page", result.Message);
            }
        }



    }

    protected void OpenNewPageModal()
    {
        var p = new ModalParameters();
        p.Add("parent", Parent);

        ModalService.Show<AddNewPageModal>("Add New Page", p,
            new ModalOptions
            {
                HeaderColor = "white",
                HeaderBackgroundColor = "black",
                PixelWidth = 360,
                DisableBackgroundCancel = true
            }, OnModalClosed);
    }

    private void OnModalClosed(ModalResult result)
    {
        if (!result.Cancelled)
        {
            try
            {
                _page = (Page) result.Data;
                SavePage();
                StateHasChanged();
            }
            catch (Exception e)
            {
                ModalService.ShowInfoModal($"Error", $"An unknown error occured.{Environment.NewLine}Msg:{e.Message}");
                Log.Error(e, "Exception adding mark down page");
            }
        }
        else
        {
            // TODO: go back in navigation...
        }
    }
}