@page "/campaign/"
@page "/campaign/{id}"

@using Mytheme.Data.Dto
@using Mytheme.Models
@using Mytheme.Services
@using Mytheme.Services.Interfaces

@implements IDisposable
@inject ISectionService SectionService
@inject IMapService MapService
@inject IModalService ModalService
@inject BreadcrumbService BreadcrumbService

<Styled @bind-Classname="@sectionView">
    display: @viewSection;
</Styled>

<Styled @bind-Classname="@pageView">
    display: @viewPage;
</Styled>

<Styled @bind-Classname="@mapView">
    position: relative;
    height: 100%;
    width: 100%;
    display: @viewMap;
</Styled>

<div class="@sectionView" id="sectionView">
    <SectionPage CurrentSection="@currentSection"
                 OnNavigate="Navigate"
                 @ref="@sectionRef"></SectionPage>
</div>
<div class="@pageView" id="pageView">
    <MarkdownPage CurrentPage="page"
                  OnNavigate="Navigate"
                  @ref="pageRef"></MarkdownPage>
</div>
<div class="@mapView" id="mapView">
    <LeafletMapPage MapPage="mapPage"
                    OnNavigate="Navigate"
                    @ref="@mapRef"></LeafletMapPage>
</div>



@code {

    private string sectionView, pageView, mapView;

    private string viewSection;
    private string viewMap;
    private string viewPage;

    private Section campaign;

    private Section currentSection;
    private SectionPage sectionRef;
    private MapPage mapPage;
    private LeafletMapPage mapRef;
    private Page page;
    private MarkdownPage pageRef;

    [Parameter]
    public string Id { get; set; }


    protected override async Task OnInitializedAsync()
    {
        BreadcrumbService.OnNavigateToLink += NavigateToLink;

        if (string.IsNullOrEmpty(Id))
        {
            campaign = new Section
            {
                Name = "New Campaign",
                Enabled = true,
                SectionType = SectionType.Campaign
            };

            currentSection = campaign;

            viewMap = "none";
            viewPage = "none";
            viewSection = "block";

            SetNavBar(ViewType.Section);
        }
        else
        {
            var result = await SectionService.GetSectionAsync(Guid.Parse(Id));

            if (result.IsSuccess)
            {
                campaign = result.Result;
                currentSection = result.Result;
                viewMap = "none";
                viewPage = "none";
                viewSection = "block";

                BreadcrumbService.CampaignSelected(Id);

                SetNavBar(ViewType.Section);
            }
        }
    }


    private async void NavigateToLink(NavigationLink link)
    {
        await Navigate(link);
    }

    private async Task Navigate(NavigationLink navLink)
    {
        if (navLink.ViewType == ViewType.Page && navLink.Link == Guid.Empty)
        {
            await NavigateToPageByName(navLink.Name);
            SetNavBar(ViewType.Page);
        }
        else
        {
            switch (navLink.ViewType)
            {
                case ViewType.Section:
                    await NavigateToSection(navLink.Link);
                    SetNavBar(ViewType.Section);
                    break;
                case ViewType.Page:
                    await NavigateToPage(navLink.Link);
                    SetNavBar(ViewType.Page);
                    break;
                case ViewType.MapPage:
                    await NavigateToMapPage(navLink.Link);
                    SetNavBar(ViewType.MapPage);
                    break;
                default:
                    SetNavBar(ViewType.None);
                    ModalService.ShowInfoModal($"Navigation error", $"Unknown view type.");
                    break;
            }
        }

        StateHasChanged();
    }

    private async Task NavigateToSection(Guid link)
    {
        var result = await SectionService.GetSectionAsync(link);

        if (result.IsSuccess)
        {
            currentSection = result.Result;

            viewMap = "none";
            viewPage = "none";
            viewSection = "block";

            StateHasChanged();
        }
        else
        {
            ModalService.ShowInfoModal($"Navigation error", $"Error navigating to Section: {result.Message}");
        }
    }


    private async Task NavigateToPageByName(string name)
    {
        var result = await SectionService.GetPageByNameAsync(currentSection.Id, name);

        if (result.IsSuccess)
        {
            page = result.Result;

            viewMap = "none";
            viewSection = "none";
            viewPage = "block";

            StateHasChanged();
        }
        else
        {
            await AddPage(name);
        }
    }

    private async Task NavigateToPage(Guid link)
    {
        var result = await SectionService.GetPageAsync(link);

        if (result.IsSuccess)
        {
            page = result.Result;

            viewMap = "none";
            viewSection = "none";
            viewPage = "block";

            StateHasChanged();
        }
        else
        {
            ModalService.ShowInfoModal($"Navigation error", $"Error navigating to Page: {result.Message}");
        }
    }

    private async Task NavigateToMapPage(Guid link)
    {
        var result = await MapService.GetMapPageAsync(link);

        if (result.IsSuccess)
        {

            viewSection = "none";
            viewPage = "none";
            viewMap = "block";

            mapPage = result.Result;

            StateHasChanged();
        }
        else
        {
            ModalService.ShowInfoModal($"Navigation error", $"Error navigating to Section: {result.Message}");
        }
    }

    private void SetNavBar(ViewType currentView)
    {
        var buttons = new List<NavBarButton>();

        switch (currentView)
        {
            case ViewType.Section:
                buttons.Add(new NavBarButton("Save", SvgName.Save, SaveCurrentSection));

                switch (currentSection?.SectionType)
                {
                    case SectionType.Campaign:
                        buttons.Add(new NavBarButton($"Add {SectionType.Adventure.ToString()}", SvgName.Folder, AddSubsection));
                        break;
                    case SectionType.Adventure:
                        buttons.Add(new NavBarButton($"Add {SectionType.Chapter.ToString()}", SvgName.Folder, AddSubsection));
                        break;
                }

                buttons.Add(new NavBarButton($"Add Page", SvgName.Page, AddPage));
                buttons.Add(new NavBarButton($"Add Map", SvgName.Map, AddMapPage));

                BreadcrumbService.SetBreadCrumb(currentSection.Name, currentSection.Id.ToString(), currentSection.Id != Guid.Empty);
                break;
            case ViewType.Page:
                buttons.Add(new NavBarButton("Save", SvgName.Save, SavePage));
                buttons.Add(new NavBarButton("Delete", SvgName.Delete, DeletePage));

                BreadcrumbService.SetBreadCrumb( page.Name, page.Id.ToString(), page.Id != Guid.Empty);
                break;
            case ViewType.MapPage:
                buttons.Add(new NavBarButton("Save", SvgName.Save, SaveMapPage));
                buttons.Add(new NavBarButton("Delete", SvgName.Delete, DeleteMapPage));

                BreadcrumbService.SetBreadCrumb( mapPage.Name, mapPage.Id.ToString(), mapPage.Id != Guid.Empty);
                break;
            case ViewType.None:
                BreadcrumbService.SetBreadCrumb("Navigation Error", "", false);
                break;
        }

        BreadcrumbService.SetNavBarButtons(buttons);
    }


    #region Section logic

    private async void SaveCurrentSection()
    {
        if (currentSection.Id == Guid.Empty)
        {
            var result = await SectionService.AddSectionAsync(currentSection);

            if (result.IsSuccess)
            {
                currentSection.Id = result.Result;
                BreadcrumbService.SetBreadCrumb(currentSection.Name, currentSection.Id.ToString(), true);
                
                if (currentSection.SectionType == SectionType.Campaign)
                {
                    BreadcrumbService.CampaignSelected(currentSection.Id.ToString());
                }
            }
            else
            {
                ModalService.ShowInfoModal($"Error Saving section", result.Message);
            }
        }
        else
        {
            var result = await SectionService.UpdateSectionAsync(currentSection);

            if (!result.IsSuccess)
            {
                ModalService.ShowInfoModal($"Error Saving section", result.Message);
            }
        }
    }

    private void AddSubsection()
    {
        if (currentSection.Id == Guid.Empty)
        {
            ModalService.ShowInfoModal($"{currentSection?.SectionType} Not Saved", $"You must save this {currentSection?.SectionType} before adding a Subsection");
            return;
        }

        SectionType newSection;

        switch (currentSection.SectionType)
        {
            case SectionType.Campaign:
                newSection = SectionType.Adventure;
                break;
            case SectionType.Adventure:
                newSection = SectionType.Chapter;
                break;
            default:
                newSection = SectionType.Campaign;
                break;
        }

        currentSection = new Section{Parent = currentSection.Id, SectionType = newSection};

        SetNavBar(ViewType.Section);

        StateHasChanged();
    }
    
    #endregion

    #region Page logic 

    private async void AddPage()
    {
        if (currentSection.Id == Guid.Empty)
        {
            ModalService.ShowInfoModal($"{currentSection?.SectionType} Not Saved", $"You must save this {currentSection?.SectionType} before adding a Page");
            return;
        }

        await AddPage(currentSection.Id);
    }

    private async Task AddPage(Guid parent)
    {
        page = new Page
        {
            Name = "New Page",
            FK_Section = parent
        };

        viewMap = "none";
        viewSection = "none";
        viewPage = "block";

        StateHasChanged();
    }

    private async Task AddPage(string name)
    {
        page = new Page
        {
            Name = name,
            FK_Section = currentSection.Id
        };

        viewMap = "none";
        viewSection = "none";
        viewPage = "block";

        StateHasChanged();
    }

    private async void SavePage()
    {
        await pageRef.Save();
    }

    private async void DeletePage()
    {

    }
    #endregion

    #region MapPage logic

    private async void AddMapPage()
    {
        if (currentSection.Id == Guid.Empty)
        {
            ModalService.ShowInfoModal($"{currentSection?.SectionType} Not Saved", $"You must save this {currentSection?.SectionType} before adding a Map");
            return;
        }

        await AddMapPage(currentSection.Id);
    }

    private async Task AddMapPage(Guid parent)
    {
        mapPage = new MapPage
        {
            FK_Section = parent
        };

        viewSection = "none";
        viewPage = "none";
        viewMap = "block";

        StateHasChanged();
    }

    private async void SaveMapPage()
    {
        await mapRef.Save();
    }

    private async void DeleteMapPage()
    {

    }

    #endregion

    public void Dispose()
    {
        BreadcrumbService.OnNavigateToLink -= NavigateToLink;
    }
}
