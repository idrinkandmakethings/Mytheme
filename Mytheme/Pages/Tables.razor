@page "/tables"

@using Mytheme.Data
@using Mytheme.Data.Dto
@using Mytheme.Models
@using Mytheme.Services
@using Mytheme.Services.Interfaces

@inject IRandomTableService RandomTableService
@inject IModalService ModalService
@inject NavigationManager NavigationManager
@inject BreadcrumbService BreadcrumbService


@if (tables == null)
{
    <p><em>@loadingText</em></p>
}
else
{
    <Grid Items="tables" Context="table">
        <GridHeader>
            <th>Name</th>
            <th>Category</th>
            <th>Description</th>
        </GridHeader>
        <GridRow>
            <tr @onclick="@(() => NavigationManager.NavigateTo($"edit-table/{table.Name}"))">
                <td>@table.Name</td>
                <td>@table.Category</td>
                <td>@table.Description</td>
            </tr>
        </GridRow>
    </Grid>
}

@code {
    RandomTable[] tables;

    private string loadingText = "Loading...";

    protected override async Task OnInitializedAsync()
    {
        var buttons = new List<NavBarButton>();

        buttons.Add(new NavBarButton("Add Table", SvgName.Add, AddTable));
        buttons.Add(new NavBarButton("Import Table", SvgName.Import, ImportTable));

        BreadcrumbService.SetNavBarButtons(buttons);

        BreadcrumbService.ClearHistory();
        BreadcrumbService.SetBreadCrumb("Tables", new NavigationLink(Guid.Empty, ViewType.Tables), true);

        var result = await RandomTableService.GetAllRandomTables();

        if (result.Status == DalStatus.Success)
        {
            tables = result.Result;
        }
    }

    private void AddTable()
    {
        NavigationManager.NavigateTo($"edit-table");
    }

    private void ImportTable()
    {
        ModalService.ShowInfoModal($"Not Implemented", "Need moar code, dummy.");
    }
}
