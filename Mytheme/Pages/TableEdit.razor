@page "/edit-table"
@page "/edit-table/{tablename}"

@using System.IO
@using Blazor.FileReader
@using Mytheme.Dal.Dto
@using Mytheme.Data
@using Mytheme.Modals

@inject RandomTableService RandomTableService
@inject FileHandlerService FileHandlerService
@inject IFileReaderService FileReaderService
@inject IModalService ModalService
@inject BreadcrumbService BreadcrumbService


<Styled>
    input[type=text] {
    width: 100%;
    padding: 12px 20px;
    margin: 8px 0;
    display: block;
    border: 1px solid #ccc;
    border-radius: 4px;
    box-sizing: border-box;
    }

    label {
    width: 100%;
    margin: 8px 0;
    display: block;
    }

    textarea {
    width: 100%;
    padding: 12px 20px;
    margin: 8px 0;
    display: block;
    border: 1px solid #ccc;
    border-radius: 4px;
    box-sizing: border-box;
    }
</Styled>

<Styled @bind-Classname="@form">
    display:block;0
    margin-bottom: 10px;
</Styled>

<Styled @bind-Classname="@dropTarget">
    display:@dropZoneVisibility;
    padding: 20px;
    margin-bottom: 10px;
    border: 1px dashed black;
    border-radius: 5px;
</Styled>

<Styled @bind-Classname="@dropTargetDrag">
    border-color: orangered;
    font-weight: bold;
</Styled>

<Styled @bind-Classname="@dropArea" Compose1="@dropTarget" Compose2="@dropTargetDrag" Compose2If="@dragging" />

<Styled @bind-Classname="@loading">
    align: center;
    color: black;
</Styled>


<EditForm Model="@table" class="@form" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <label for="name">Name: </label>
    <InputText id="name" @bind-Value="table.Name" />

    <label for="category">Category: </label>
    <div>
        <InputSelect id="classification" @bind-Value="table.Category">
            <option value="">@categoryText</option>
            @foreach (var cat in categories)
            {
                <option value="@cat">@cat</option>
            }
        </InputSelect>
        <button type="button" class="btn btn-primary" @onclick="@OpenCategoryModal">+</button>
    </div>

    <label for="desc">Description: </label>
    <InputTextArea id="desc" @bind-Value="table.Description"></InputTextArea>
    <button type="Submit" class="btn btn-primary">Save Table</button>
</EditForm>

<div class="@dropArea"
     @ref=dropTargetElement
     @ondrop=OnDrop
     @ondragenter=OnDragEnter
     @ondragleave=OnDragLeave>
    @fileName
</div>


@if (entries == null)
{
    <div>
        <p class="@loading"><em>@loadingText</em></p>
    </div>
}
else
{
    <MythemeGrid Items="entries">
        <GridHeader>
            <th>Value</th>
        </GridHeader>
        <GridRow>
            <tr>
                <td>@context</td>
            </tr>
        </GridRow>
    </MythemeGrid>
}



@code {

    [Parameter]
    public string Tablename { get; set; }


    // css class names
    private string form, dropArea, dropTarget, dropTargetDrag, loading;

    // css attributes
    private string dropZoneVisibility;

    private bool isUpdate;

    private bool dragging;

    private string fileName = "Drop Files here.";
    private string categoryText = "Loading...";
    private string loadingText = "";

    string[] entries;
    List<string> categories = new List<string>();

    RandomTable table = new RandomTable();

    List<IFileInfo> FileList { get; } = new List<IFileInfo>();

    ElementReference dropTargetElement;
    IFileReaderRef dropReference;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(Tablename))
        {
            BreadcrumbService.SetBreadCrumb("Add Table");
            dropZoneVisibility = "block";
            isUpdate = false;
        }
        else
        {
            dropZoneVisibility = "none";
            isUpdate = true;
            var result = await RandomTableService.GetRandomTable(Tablename);
            if (result.IsSuccess)
            {
                table = result.Result;
            }
            entries = table.Entries.Select(x => x.Entry).ToArray();
        }


        var catResult = await RandomTableService.GetCategories();

        if (catResult.IsSuccess)
        {
            categories = catResult.Result;
        }

        categoryText = "Select category ...";
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool isFirstRender)
    {
        if (isFirstRender)
        {
            dropReference = FileReaderService.CreateReference(dropTargetElement);
            await dropReference.RegisterDropEventsAsync();
        }
    }

    protected void OpenCategoryModal()
    {
        ModalService.OnClose += OnModalClosed;
        ModalService.Show<AddCategoryModal>("Add Category", null,
            new ModalOptions
            {
                HeaderColor = "white",
                HeaderBackgroundColor = "black",
                PixelWidth = 360
            });
    }

    private void OnModalClosed(ModalResult result)
    {
        if (!result.Cancelled)
        {
            try
            {
                categories.Add((string)result.Data);
                categories.Sort();
                StateHasChanged();
            }
            catch
            {
                //nom nom
            }
        }

        ModalService.OnClose -= OnModalClosed;
    }

    protected async Task HandleValidSubmit()
    {
        await SaveTable();
    }

    protected async Task SaveTable()
    {
        table.Entries = entries.Select(e => new TableEntry() { Entry = e }).ToList();




        if (isUpdate)
        {
            var result = await RandomTableService.UpdateRandomTable(table);

            if (result.IsSuccess)
            {
                loadingText = "Updated!";
            }
            else
            {
                loadingText = result.Message;
            }
        }
        else
        {
            var result = await RandomTableService.AddRandomTable(table);

            if (result.IsSuccess)
            {
                loadingText = "Saved!";
                table = new RandomTable();
                entries = null;
            }
            else
            {
                loadingText = result.Message;
            }
        }
    }

    public void OnDragEnter(EventArgs e)
    {
        dragging = true;
    }

    public void OnDragLeave(EventArgs e)
    {
        dragging = false;
    }

    public async Task OnDrop(EventArgs e)
    {

        dragging = false;
        this.StateHasChanged();
        await this.RefreshFileList();
        await TryParesFile();
    }

    private async Task RefreshFileList()
    {
        FileList.Clear();
        foreach (var file in await dropReference.EnumerateFilesAsync())
        {
            var fileInfo = await file.ReadFileInfoAsync();
            FileList.Add(fileInfo);
        }

        fileName = FileList.FirstOrDefault()?.Name;

        StateHasChanged();
    }

    private async Task TryParesFile()
    {
        loadingText = "Loading...";
        foreach (var file in await dropReference.EnumerateFilesAsync())
        {
            var fileInfo = await file.ReadFileInfoAsync();
            if (fileInfo.Name == fileName)
            {
                await using var fs = await file.OpenReadAsync();
                await using var ms = new MemoryStream();
                await fs.CopyToAsync(ms);

                entries = await FileHandlerService.ParseTableFile(ms);

            }
        }
    }

}
