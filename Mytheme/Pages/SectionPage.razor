@page "/section/create/{parentId}/{stype}"
@page "/section/{id}"
@page "/section"

@using Mytheme.Dal
@using Mytheme.Dal.Dto
@using Mytheme.Services
@using Mytheme.Services.Interfaces
@using Serilog


@inject BreadcrumbService BreadcrumbService
@inject NavigationManager NavigationManager
@inject SvgHelperService SvgHelperService
@inject IModalService ModalService
@inject ISectionService SectionService


<Styled @bind-Classname="@detailSection">
    height: 30%;
    margin-bottom: 20px;
    @@media screen and (max-height: 520px) {
    height: 40px;
    }
</Styled>

<Styled @bind-Classname="@nameDiv">
    height: 30%;
    @@media screen and (max-height: 520px) {
    height: 100%;
    }
</Styled>

<Styled @bind-Classname="@descriptionDiv">
    height: 70%;
    @@media screen and (max-height: 520px) {
    display: None;
    }
</Styled>

<Styled @bind-Classname="@description">
    resize: none;
    height: 100%;
    overflow-y: visible;
</Styled>



<Styled @bind-Classname="@linkSection">
    display: flex;
    height:70%;
    min-height: 280px;
    padding-bottom: 20px;
    @@media screen and (max-width: 900px){
    flex-direction: column;
    height:1600px;
    }
    @@media screen and (max-height: 520px) and (min-width: 900px) {
    height: 90%;
    }
</Styled>

<Styled @bind-Classname="@subSectionColumn">
    display: @subSectionDisplay;
    flex: 1;
    border: 1px solid gray;
    height: 100%;
    @@media screen and (max-width: 900px) {
    flex-direction: column;
    height: 800px;
    }
</Styled>

<Styled @bind-Classname="@column">
    flex: 1;
    border: 1px solid gray;
    height: 100%;
    @@media screen and (max-width: 900px) {
    flex-direction: column;
    height: 800px;
    }
</Styled>

<Styled @bind-Classname="@subSectionHeader">
    height: 60px;
    background: black;
    & h2{
    color: white;
    }
    @@media screen and (min-width: 900px) {
    pointer-events: none;
    }
</Styled>

<Styled @bind-Classname="@pageHeader">
    height: 60px;
    background: black;
    & h2{
    color: white;
    }
    @@media screen and (min-width: 900px) {
    pointer-events: none;
    }
</Styled>

<Styled @bind-Classname="@mapHeader">
    height: 60px;
    background: black;
    & h2{
    color: white;
    }
    @@media screen and (min-width: 900px) {
    pointer-events: none;
    }
</Styled>

<Styled @bind-Classname="@subSectionLinks">
    height: 100%;
    display: @subLinkDisplay;
    overflow-y: auto;
</Styled>

<Styled @bind-Classname="@pageLinks">
    height: 100%;
    display: @pageLinkDisplay;
    overflow-y: auto;
</Styled>

<Styled @bind-Classname="@mapLinks">
    height: 100%;
    display: @mapLinksDisplay;
    overflow-y: auto;
</Styled>

<Styled @bind-Classname="@linkTable">
    border-collapse: collapse;
    width: 100%;
    
        & th, td {
    text-align: left;
    padding: 8px;
    }

    & tr:nth-child(even) {background-color: #f2f2f2;}
</Styled>

@if (_section != null)
{

    <div id="details" class="@detailSection">
        <div class="@nameDiv">
            <input type="text" id="name" placeholder="Name" @bind="@_section.Name" />
        </div>
        <div class="@descriptionDiv">
            <textarea id="desc" class="@description" placeholder="Description" @bind="@_section.Description"></textarea>
        </div>
    </div>
    <div id="linkSection" class="@linkSection">
        <div class="@subSectionColumn" style="background-color:#aaa;">
            <div class="@subSectionHeader">
                <h2>@subSectionType</h2>
            </div>
            <div class="@subSectionLinks">
                <table class="@linkTable">
                    @foreach (var sub in _section.Children)
                    {
                        <tr>
                            <td>
                                @sub.Name
                            </td>
                            <td>
                                <a @onclick="@( () => NavigateToSection(sub.Id))">@SvgHelperService.GetImage(SvgName.CircleArrowRight, 26, "white")</a>
                            </td>
                        </tr>
                    }
                </table>
            </div>
        </div>
        <div class="@column" style="background-color:#bbb;">
            <div class="@pageHeader">
                <h2>Pages</h2>
            </div>
            <div class="@pageLinks">
                <table class="@linkTable">
                    @foreach (var p in _section.PageIds)
                    {
                        <tr>
                            @p.Name
                        </tr>
                    }
                </table>
            </div>
        </div>
        <div class="@column" style="background-color:#ccc;">
            <div class="@mapHeader">
                <h2>Maps</h2>
            </div>
            <div class="@mapLinks">
                <table class="@linkTable">
                    @foreach (var m in _section.MapPageIds)
                    {
                        <tr>
                            @m.Name
                        </tr>
                    }
                </table>
            </div>
        </div>
        </div>
}

@code {

    private string mainView, detailSection, nameDiv, descriptionDiv, linkSection, subSectionColumn, column;

    private string description, subSectionHeader, subSectionLinks, pageHeader, pageLinks, mapHeader, mapLinks, linkTable;

    private string subSectionDisplay, subLinkDisplay, pageLinkDisplay, mapLinksDisplay;


    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public string ParentId { get; set; }

    [Parameter]
    public string SType { get; set; }


    private SectionType sectionType;

    private string subSectionType;

    private Section _section;

    protected override async Task OnInitializedAsync()
    {
        subLinkDisplay = "block";
        pageLinkDisplay = "block";
        mapLinksDisplay = "block";


        if (!string.IsNullOrEmpty(Id))
        {
            var result = await SectionService.GetSectionAsync(Id);

            if (result.IsSuccess)
            {
                _section = result.Result;

                Id = _section.Id;

                sectionType = _section.SectionType;

                BreadcrumbService.SetBreadCrumb(_section.Name);
            }
        }
        else if (!string.IsNullOrEmpty(ParentId))
        {
            try
            {
                sectionType = (SectionType)Enum.Parse(typeof(SectionType), SType);
            }
            catch (Exception e)
            {
                Log.Error($"Error parsing route arg enum. ex:{e.Message}");
                sectionType = SectionType.Campaign;
            }

            Id = Guid.Empty.ToString();

            BreadcrumbService.SetBreadCrumb($"New {sectionType.ToString()}");

            _section = new Section
            {
                Id = Id,
                Enabled = true,
                DateCreated = DateTime.Now,
                SectionType = sectionType,
                Parent = ParentId,
            };
        }
        else
        {
            sectionType = SectionType.Campaign;

            Id = Guid.Empty.ToString();

            BreadcrumbService.SetBreadCrumb($"New Campaign");

            _section = new Section
            {
                Id = Id,
                Enabled = true,
                DateCreated = DateTime.Now,
                SectionType = SectionType.Campaign,
                Parent = Guid.Empty.ToString(),
            };
        }

        SetAllTheThings();
    }


    private async void NavigateToSection(string id)
    {
        Id = id;

        var result = await SectionService.GetSectionAsync(Id);

        if (result.IsSuccess)
        {
            _section = result.Result;

            Id = _section.Id;

            sectionType = _section.SectionType;

            BreadcrumbService.SetBreadCrumb(_section.Name);
        }

        SetAllTheThings();


        StateHasChanged();
    }

    private void SetAllTheThings()
    {
        var buttons = new List<NavBarButton>();

        buttons.Add(new NavBarButton("Save", SvgName.Save, SaveSection));

        subSectionType = string.Empty;
        subSectionDisplay = "block";

        switch (sectionType)
        {
            case SectionType.Campaign:
                subSectionType = SectionType.Adventure.ToString();
                buttons.Add(new NavBarButton($"Add {subSectionType}", SvgName.Folder, AddSubsection));
                break;
            case SectionType.Adventure:
                subSectionType = SectionType.Chapter.ToString();
                buttons.Add(new NavBarButton($"Add {subSectionType}", SvgName.Folder, AddSubsection));
                break;
            case SectionType.Chapter:
                subSectionType = SectionType.Section.ToString();
                buttons.Add(new NavBarButton($"Add {subSectionType}", SvgName.Folder, AddSubsection));
                break;
            default:
                subSectionDisplay = "none";
                break;
        }

        buttons.Add(new NavBarButton($"Add Page", SvgName.Page, AddPage));
        buttons.Add(new NavBarButton($"Add Map", SvgName.Map, AddMapPage));

        BreadcrumbService.SetNavBarButtons(buttons);
    }

    private async void SaveSection()
    {

        DalResult result;

        if (_section.Id == Guid.Empty.ToString())
        {
            result = await SectionService.AddSectionAsync(_section);
        }
        else
        {
            result = await SectionService.UpdateSectionAsync(_section);
        }

        if (result.IsSuccess)
        {
            _section.Id = result.Message;
            Id = _section.Id;
            BreadcrumbService.SetBreadCrumb(_section.Name);
        }
        else
        {
            ModalService.ShowInfoModal($"Error Saving {sectionType}", result.Message);
        }
    }

    private void AddSubsection()
    {


        SectionType newSection;

        switch (sectionType)
        {
            case SectionType.Campaign:
                newSection = SectionType.Adventure;
                break;
            case SectionType.Adventure:
                newSection = SectionType.Chapter;
                break;
            case SectionType.Chapter:
                newSection = SectionType.Section;
                break;
            default:
                newSection = SectionType.Campaign;
                break;
        }

        if (!IsSaved())
        {
            ModalService.ShowInfoModal($"{sectionType} Not Saved", $"You must save this {sectionType} before adding {(newSection == SectionType.Adventure ? "an" : "a")} {newSection}");
            return;
        }

        NavigationManager.NavigateTo($"/section/create/{_section.Id}/{newSection}", true);
    }

    private void AddPage()
    {
        var test = "";
    }

    private void AddMapPage()
    {
        var test = "";
    }

    private bool IsSaved()
    {
        return _section.Id != Guid.Empty.ToString();
    }
}