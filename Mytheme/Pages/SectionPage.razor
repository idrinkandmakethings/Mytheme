@implements IDisposable
@using Mytheme.Data.Dto
@using Mytheme.Models
@using Mytheme.Services
@using Serilog

@inject SvgHelperService SvgHelperService
@inject BrowserResizeService BrowserResizeService
@inject IJSRuntime JsRuntime

<Styled @bind-Classname="@detailSection">
    height: 30%;
    margin-bottom: 20px;
    @@media screen and (max-height: 640px) {
    height: 40px;
    }
</Styled>

<Styled @bind-Classname="@nameDiv">
    height: 30%;
    @@media screen and (max-height: 640px) {
    height: 100%;
    }
</Styled>

<Styled @bind-Classname="@descriptionDiv">
    height: 70%;
    @@media screen and (max-height: 640px) {
    display: None;
    }
</Styled>

<Styled @bind-Classname="@description">
    resize: none;
    height: 100%;
    overflow-y: visible;
</Styled>



<Styled @bind-Classname="@linkSection">
    display: flex;
    height: 67%;
    min-height: 280px;
    @@media screen and (max-width: 1100px){
    flex-direction: column;
    }
    @@media screen and (max-height: 640px){
    height: 85%;
    }
</Styled>

<Styled @bind-Classname="@subSectionColumn">
    display: @subSectionDisplay;
    flex: @subSectionColumnFlex;
    flex-direction: column;
    border: 1px solid gray;
    @@media screen and (max-width: 1100px){
    height: 70%;
    }
</Styled>

<Styled @bind-Classname="@pagesColumn">
    flex: @pagesColumnFlex;
    display: flex;
    flex-direction: column;
    border: 1px solid gray;
    height: 100%;
    @@media screen and (max-width: 1100px){
    height: 70%;
    }
</Styled>

<Styled @bind-Classname="@mapsColumn">
    flex: @mapsColumnFlex;
    display: flex;
    flex-direction: column;
    border: 1px solid gray;
    height: 100%;
    @@media screen and (max-width: 1100px){
    height: 70%;
    }
</Styled>

<Styled @bind-Classname="@subSectionHeader">
    height: 60px;
    background: black;
    & h2{
    color: white;
    }
    @@media screen and (min-width: 1100px) {
    pointer-events: none;
    }
</Styled>

<Styled @bind-Classname="@pageHeader">
    height: 60px;
    background: black;
    & h2{
    color: white;
    }
    @@media screen and (min-width: 1100px) {
    pointer-events: none;
    }
</Styled>

<Styled @bind-Classname="@mapHeader">
    height: 60px;
    background: black;
    & h2{
    color: white;
    }
    @@media screen and (min-width: 1100px) {
    pointer-events: none;
    }
</Styled>

<Styled @bind-Classname="@subSectionLinks">
    display: @subLinkDisplay;
    flex-grow: 1;
    overflow-y: auto;
    overflow-x: hidden;
</Styled>

<Styled @bind-Classname="@pageLinks">
    display: @pageLinkDisplay;
    flex-grow: 1;
    overflow-y: auto;
    overflow-x: hidden;
</Styled>

<Styled @bind-Classname="@mapLinks">
    display: @mapLinkDisplay;
    flex-grow: 1;
    overflow-y: auto;
    overflow-x: hidden;
</Styled>

<Styled @bind-Classname="@linkTable">
    display: table;
    border-collapse: collapse;
    width: 100%;
    & th, td {
    text-align: left;
    padding: 8px;
    }

    & tr:nth-child(even) {background-color: #f2f2f2;}
</Styled>

@if (CurrentSection != null)
{

    <div id="details" class="@detailSection">
        <div class="@nameDiv">
            <input type="text" id="name" placeholder="Name" @bind="@CurrentSection.Name" />
        </div>
        <div class="@descriptionDiv">
            <textarea id="desc" class="@description" placeholder="Description" @bind="@CurrentSection.Description"></textarea>
        </div>
    </div>
    <div id="linkSection" class="@linkSection">
        <div class="@subSectionColumn" style="background-color:#aaa;">
            <div @onclick="@( () => OpenSubSections())" class="@subSectionHeader">
                <h2>@subSectionType</h2>
            </div>
            <div class="@subSectionLinks">
                <table class="@linkTable">
                    <tbody>
                        @foreach (var sub in CurrentSection.Children)
                        {
                            <tr>
                                <td>
                                    @sub.Name
                                </td>
                                <td>
                                    <a @onclick="@(() => NavigateTo(new NavigationLink(sub.Id, ViewType.Section)))">@SvgHelperService.GetImage(SvgName.CircleArrowRight, 26, "white")</a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <div class="@pagesColumn" style="background-color:#bbb;">
            <div @onclick="@( () => OpenPages())" class="@pageHeader">
                <h2>Pages</h2>
            </div>
            <div class="@pageLinks">
                <table class="@linkTable">
                    @foreach (var p in CurrentSection.PageIds)
                    {
                    <tr>
                        <td>
                            @p.Name
                        </td>
                        <td>
                            <a @onclick="@( () =>  NavigateTo(p.Link))">@SvgHelperService.GetImage(SvgName.CircleArrowRight, 26, "white")</a>
                        </td>
                    </tr>
                    }
                </table>
            </div>
        </div>
        <div class="@mapsColumn" style="background-color:#ccc;">
            <div @onclick="@( () => OpenMaps())" class="@mapHeader">
                <h2>Maps</h2>
            </div>
            <div class="@mapLinks">
                <table class="@linkTable">
                    @foreach (var m in CurrentSection.MapPageIds)
                    {
                        <tr>
                            <td>
                                @m.Name
                            </td>
                            <td>
                                <a @onclick="@( () => NavigateTo(m.Link))">@SvgHelperService.GetImage(SvgName.CircleArrowRight, 26, "white")</a>
                            </td>
                        </tr>}
                </table>
            </div>
        </div>
     </div>
}

@code {

    private string  detailSection, nameDiv, descriptionDiv, linkSection, subSectionColumn, pagesColumn, mapsColumn;

    private string description, subSectionHeader, subSectionLinks, pageHeader, pageLinks, mapHeader, mapLinks, linkTable;

    private string subSectionDisplay, subLinkDisplay, pageLinkDisplay, mapLinkDisplay;

    private int subSectionColumnFlex, pagesColumnFlex, mapsColumnFlex;

    private bool accordionEngaged, accordionDisengaged;


    [Parameter]
    public Section CurrentSection { get; set; }

    [Parameter]
    public EventCallback<NavigationLink> OnNavigate { get; set; }
    
    private string subSectionType;

    protected override async Task OnInitializedAsync()
    {
        BrowserResizeService.OnResize += OnResize;
        await BrowserResizeService.RegisterForResize(JsRuntime);

        var width = await BrowserResizeService.GetInnerWidth(JsRuntime);

        SetLinkDisplay(width);

        SetAllTheThings();

        StateHasChanged();
    }

    protected override void OnParametersSet()
    {
        SetAllTheThings();
    }


    private void SetAllTheThings()
    {
        subSectionType = string.Empty;
        subSectionDisplay = CurrentSection?.SectionType == SectionType.Chapter ? "none" :"flex";

        switch (CurrentSection?.SectionType)
        {
            case SectionType.Campaign:
                subSectionType = SectionType.Adventure.ToString();
                break;
            case SectionType.Adventure:
                subSectionType = SectionType.Chapter.ToString();
                break;
        }
    }
    

    private void NavigateTo(NavigationLink link)
    {
        OnNavigate.InvokeAsync(link);
    }

    private async Task OnResize()
    {
        var width = await BrowserResizeService.GetInnerWidth(JsRuntime);

        SetLinkDisplay(width);
    }

    private void SetLinkDisplay(int width)
    {
        if (width < 1100 && accordionEngaged == false)
        {
            accordionEngaged = true;
            subLinkDisplay = "block";
            subSectionColumnFlex = 1;
            pageLinkDisplay = "none";
            pagesColumnFlex = 0;
            mapLinkDisplay = "none";
            mapsColumnFlex = 0;
            accordionDisengaged = false;
            StateHasChanged();

        }
        else if (width >= 1100 && accordionDisengaged == false)
        {
            accordionDisengaged = true;
            subLinkDisplay = "block";
            subSectionColumnFlex = 1;
            pageLinkDisplay = "block";
            pagesColumnFlex = 1;
            mapLinkDisplay = "block";
            mapsColumnFlex = 1;
            accordionEngaged = false;
            StateHasChanged();
        }
    }

    private void OpenSubSections()
    {
        if (accordionEngaged)
        {
            subLinkDisplay = subLinkDisplay == "block" ? "none" : "block";
            subSectionColumnFlex = subLinkDisplay == "block" ? 1 : 0;
            pageLinkDisplay = "none";
            pagesColumnFlex = 0;
            mapLinkDisplay = "none";
            mapsColumnFlex = 0;
            StateHasChanged();
        }
    }

    private void OpenPages()
    {
        if (accordionEngaged)
        {
            subLinkDisplay = "none";
            subSectionColumnFlex = 0;
            pageLinkDisplay = pageLinkDisplay == "block" ? "none" : "block";
            pagesColumnFlex = pageLinkDisplay == "block" ? 1 : 0;
            mapLinkDisplay = "none";
            mapsColumnFlex = 0;
            StateHasChanged();
        }
    }

    private void OpenMaps()
    {
        if (accordionEngaged)
        {
            subLinkDisplay = "none";
            subSectionColumnFlex = 0;
            pageLinkDisplay = "none";
            pagesColumnFlex = 0;
            mapLinkDisplay = mapLinkDisplay == "block" ? "none" : "block";
            mapsColumnFlex = mapLinkDisplay == "block" ? 1 : 0;
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        BrowserResizeService.OnResize -= OnResize;
    }
}