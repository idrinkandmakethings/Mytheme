@page "/section/create/{parentId}/{type}"
@page "/section/{id}"
@page "/section"

@using Mytheme.Dal.Dto
@using Mytheme.Services
@using Mytheme.Services.Interfaces
@using Serilog
@using Serilog.Core
@using Logger = Mytheme.Utility.Logger

@inject BreadcrumbService BreadcrumbService
@inject NavigationManager NavigationManager
@inject IModalService ModalService
@inject ISectionService SectionService

<input type="text" id="name" placeholder="Name" @bind="@_section.Name" />
<input type="text" id="desc" placeholder="Description" @bind="@_section.Description" />
<div>
    <label for="created">Created: </label><span id="created">@_section.DateCreated.ToShortDateString()</span>
</div>

@code {

    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public string ParentId { get; set; }

    [Parameter]
    public string Type { get; set; }


    private SectionType sectionType;

    private SectionType subsectionType;

    private Section _section;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(Id))
        {
            var result = await SectionService.GetSection(Id);

            if (result.IsSuccess)
            {
                _section = result.Result;
                sectionType = _section.SectionType;
            }
        }
        else if (!string.IsNullOrEmpty(ParentId))
        {
            try
            {
                sectionType = (SectionType)Enum.Parse(typeof(SectionType), Type);
            }
            catch (Exception e)
            {
                Log.Error($"Error parsing route arg enum. ex:{e.Message}");
                sectionType = SectionType.Campaign;
            }

            Id = Guid.Empty.ToString();

            BreadcrumbService.SetBreadCrumb($"New {sectionType.ToString()}");

            _section = new Section
            {
                Id = Id,
                DateCreated = DateTime.Now,
                SectionType = sectionType,
                Parent = ParentId,
            };
        }
        else
        {
            sectionType = SectionType.Campaign;

            Id = Guid.Empty.ToString();

            BreadcrumbService.SetBreadCrumb($"New Campaign");

            _section = new Section
            {
                Id = Id,
                DateCreated = DateTime.Now,
                SectionType = SectionType.Campaign,
                Parent = Guid.Empty.ToString(),
            };
        }

        BreadcrumbService.NavBarButtons.Clear();
        BreadcrumbService.NavBarButtons.Add(new NavBarButton("Save", SvgName.Save, SaveSection));

        if (sectionType != SectionType.Section)
        {
            var sub = string.Empty;

            switch (subsectionType)
            {
                case SectionType.Campaign:
                    sub = SectionType.Adventure.ToString();
                    break;
                case SectionType.Adventure:
                    sub = SectionType.Chapter.ToString();
                    break;
                case SectionType.Chapter:
                    sub = SectionType.Section.ToString();
                    break;
            }

            BreadcrumbService.NavBarButtons.Add(new NavBarButton($"Add {sub}", SvgName.Folder, AddSubsection));
        }
        BreadcrumbService.NavBarButtons.Add(new NavBarButton("Add Page", SvgName.Page, AddPage));
        BreadcrumbService.NavBarButtons.Add(new NavBarButton("Add Map", SvgName.Map, AddMapPage));

    }

    private void SaveSection()
    {
        try
        {
            Id = Guid.NewGuid().ToString();
            _section.Id = Id;
            var result = SectionService.AddSection(_section);
            BreadcrumbService.SetBreadCrumb(_section.Name);
        }
        catch (Exception e)
        {
            Logger.LogException(e, $"Exception saving section {_section.Name}");
        }
    }

    private void AddSubsection()
    {
        

        SectionType newSection;

        switch (sectionType)
        {
            case SectionType.Campaign:
                newSection = SectionType.Adventure;
                break;
            case SectionType.Adventure:
                newSection = SectionType.Chapter;
                break;
            case SectionType.Chapter:
                newSection = SectionType.Section;
                break;
            default:
                newSection = SectionType.Campaign;
                break;
        }

        if (!IsSaved())
        {
            ModalService.ShowInfoModal($"{sectionType} Not Saved", $"You must save this {sectionType} before adding {(newSection == SectionType.Adventure ? "an" : "a")} {newSection}");
            return;
        }

        NavigationManager.NavigateTo($"/section/create/{_section.Id}/{newSection}", true);
    }

    private void AddPage()
    {
        var test = "";
    }

    private void AddMapPage()
    {
        var test = "";
    }

    private bool IsSaved()
    {
        return _section.Id != Guid.Empty.ToString();
    }
}