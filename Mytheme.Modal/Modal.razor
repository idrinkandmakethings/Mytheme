@using Mytheme.Modal.Services
@inject IModalService ModalService


<Styled @bind-Classname="@modalContainer">
    display: @modalDisplay;
    position: fixed;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    z-index: 5000;
    align-items: center;
    justify-content: center;
    overflow: auto;
</Styled>


<Styled @bind-Classname="@modalBackground">
    display: block;
    position: fixed;
    width: 100%;
    height: 100%;
    z-index: 101;
    background-color: rgba(0,0,0,0.5);
</Styled>

<Styled @bind-Classname="@modalWrapper">
    z-index: 102;
    width: @modalWidth;
</Styled>

<Styled @bind-Classname="@modal">
    background-color: #fff;
    border-radius: 4px;
    border: 1px solid #000;
    box-shadow: 0 2px 2px rgba(0,0,0,.25);
    animation-name: @animateTop;
    animation-duration: 0.4s;
</Styled>

<Styled @bind-Classname="@animateTop" IsKeyframes="true">
    from {
    top:-300px;
    opacity:0;
    }
    to {
    top:0;
    opacity:1;
    }
</Styled>

<Styled @bind-Classname="@modalHeader">
    display: flex;
    align-items: flex-start;
    justify-content: space-between;
    padding: 20px;
    background-color: @titleBackground;

</Styled>

<Styled @bind-Classname="@modalTitle">
    color: @titleColor;
    margin-bottom: 0;
</Styled>

<Styled @bind-Classname="@modalClose">
    padding: 1rem;
    margin: -1rem -1rem -1rem auto;
    background-color: transparent;
    color: @titleColor;
    border: 0;
    -webkit-appearance: none;
    cursor: pointer;
    font-size: 1.5rem;
    font-weight: bold;
</Styled>

<Styled @bind-Classname="@modalContent">
    padding: 10px 20px 20px ;
</Styled>




<div class="@modalContainer">

    <div class="@modalBackground" @onclick="HandleBackgroundClick"></div>

    <div class="@modalWrapper">
        <div class="@modal">
            <div class="@modalHeader">
                <h3 class="@modalTitle">@Title</h3>
                @if (!ComponentHideCloseButton)
                {
                    <button type="button" class="@modalClose" @onclick="@(() => ModalService.Cancel())">
                        <span>&times;</span>
                    </button>
                }
            </div>
            <div class="@modalContent">
                <CascadingValue Value="@Parameters">
                    @Content
                </CascadingValue>
            </div>
        </div>
    </div>
</div>

@code {

    // css classes
    private string modalContainer, modalBackground, modalContent, modal, modalHeader, modalTitle, modalClose, modalWrapper, animateTop;


    // css properties
    private string modalDisplay = "none";
    private string titleBackground = "white";
    private string titleColor = "black";
    private string modalWidth = "80%";


    protected bool ComponentDisableBackgroundCancel { get; set; }
    protected bool ComponentHideCloseButton { get; set; }
    protected string ComponentPosition { get; set; }
    protected string ComponentStyle { get; set; }
    protected ModalOptions Options { get; set; }
    protected bool IsVisible { get; set; }
    protected string Title { get; set; }
    protected RenderFragment Content { get; set; }
    protected ModalParameters Parameters { get; set; }

    protected override void OnInitialized()
    {
        ((ModalService)ModalService).OnShow += ShowModal;
        ModalService.CloseWindow += CloseModal;
    }

    public void ShowModal(string title, RenderFragment content, ModalParameters parameters, ModalOptions options)
    {
        Title = title;
        Content = content;
        Parameters = parameters;

        SetModalOptions(options);

        modalDisplay = "flex";

        InvokeAsync(StateHasChanged);
        
    }

    internal void CloseModal()
    {

        Title = "";
        Content = null;
        ComponentStyle = "";
        modalDisplay = "none";
        InvokeAsync(StateHasChanged);
    }

    protected void HandleBackgroundClick()
    {
        if (ComponentDisableBackgroundCancel) return;

        ModalService.Cancel();
    }

    public void Dispose()
    {
        ((ModalService)ModalService).OnShow -= ShowModal;
        ModalService.CloseWindow
            -= CloseModal;
    }

    private void SetModalOptions(ModalOptions options)
    {
        if (options.HideCloseButton.HasValue)
            ComponentHideCloseButton = options.HideCloseButton.Value;

        if (options.DisableBackgroundCancel.HasValue)
            ComponentDisableBackgroundCancel = options.DisableBackgroundCancel.Value;

        titleBackground = options.HeaderBackgroundColor ?? "white";
        titleColor = options.HeaderColor ?? "black";

        modalWidth = options.PixelWidth > 0 ? $"{options.PixelWidth}px" : "80%";

    }

}
