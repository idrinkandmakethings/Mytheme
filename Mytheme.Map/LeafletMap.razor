@using System.Text
@using Microsoft.JSInterop
@using Mytheme.Map.Models
@using Mytheme.Map.Utility
@inject IJSRuntime JsRuntime

<Styled @bind-Classname="@mapStyle">
    position: absolute;
    height: 100%;
    width: 100%;
</Styled>

<div id="@mapId" class="@mapStyle"></div>

@code {

    protected  delegate void OnMarkerAdd(double lat, double lng);

    private string mapId, mapStyle;


    [Parameter]
    public MapImage MapImage { get; set; }

    [Parameter]
    public List<Marker> Markers { get; set; }

    private static event OnMarkerAdd OnMarkerAddOccured;

    protected override void OnInitialized()
    {
#pragma warning disable 4014
        OnMarkerAddOccured += delegate(double lat, double lng) { AddMarker(lat, lng); };
#pragma warning restore 4014
        mapId = StringHelper.GetRandomString(10);
    }

    [JSInvokable]
    public static void AddMarkerInterop(double lat, double lng)
    {
        OnMarkerAddOccured?.Invoke(lat, lng);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LeafletInterop.CreateImageMap(JsRuntime, mapId, MapImage.Url, MapImage.Height, MapImage.Width);

            foreach (var marker in Markers)
            {
                await AddMarker(marker);
            }
        }
    }

    private async Task AddMarker(double lat, double lng)
    {
        var marker = new Marker{Id = Guid.NewGuid().ToString(), 
            Content = SetPopup(PopupType.Link),
            Lat = lat,
            Lon = lng,
        };

        await LeafletInterop.AddMarker(JsRuntime,lat, lng, SetPopup(PopupType.Link));
    }

    private async Task AddMarker(Marker marker)
    {
        await LeafletInterop.AddMarker(JsRuntime, marker.Lat, marker.Lon, SetPopup(PopupType.Link));
    }


    private MarkupString SetPopup(PopupType type)
    {
        var sb = new StringBuilder();

        sb.Append(@"<div><a href="""">Name</a></div>");
        sb.Append("<hr/>");
        sb.Append("<div>Description</div>");
        sb.Append("<div><p>Blah blah blah</p></div>");

        return new MarkupString(sb.ToString());
    }
}


