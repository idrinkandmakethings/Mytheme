@using Microsoft.JSInterop
@using Mytheme.Map.Models
@using Mytheme.Map.Utility

@inject IJSRuntime JsRuntime

<Styled @bind-Classname="@mapStyle">
    position: absolute;
    height: 100%;
    width: 100%;
</Styled>

<div id="@mapId" class="@mapStyle"></div>

@code {

    protected  delegate void OnMarkerAdd(Coordinate coord);
    protected  delegate void OnMarkerDelete(string id);

    private static event OnMarkerAdd OnMarkerAddOccured;
    private static event OnMarkerDelete OnMarkerDeletedOccured;

    private string mapId, mapStyle;

    [Parameter]
    public EventCallback<Coordinate> OnMarkerAdded { get; set; }

    [Parameter]
    public EventCallback<string> OnMarkerDeleted { get; set; }


    protected override void OnInitialized()
    {

#pragma warning disable 4014

        OnMarkerAddOccured += async delegate(Coordinate coord)
        {
            await InvokeAsync(async () =>
            {
                await OnMarkerAdded.InvokeAsync(coord);
            });
        };

        OnMarkerDeletedOccured += async delegate(string id)
        {
            await InvokeAsync(async () =>
            {
                await OnMarkerDeleted.InvokeAsync(id);
            });
        };

#pragma warning restore 4014

        mapId = StringHelper.GetRandomString(10);
    }

    [JSInvokable]
    public static void AddMarkerInterop(double lat, double lng)
    {
        OnMarkerAddOccured?.Invoke(new Coordinate{Latitude = lat, Longitude = lng});
    }

    [JSInvokable]
    public static void RemoveMarkerInterop(string id)
    {
        OnMarkerDeletedOccured?.Invoke(id);
    }

    public async Task InitializeMap(MapImage mapImage)
    {
        await LeafletInterop.CreateImageMap(JsRuntime, mapId, mapImage.Url, mapImage.Height, mapImage.Width);
    }

    public async Task AddMarker(LeafletMarker marker)
    {
        await LeafletInterop.AddMarker(JsRuntime, marker.Lat, marker.Lon, marker.Content, marker.Id);
    }

}


