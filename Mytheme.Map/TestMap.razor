@using Microsoft.JSInterop
@using Mytheme.Map.Components
@inject IJSRuntime JsRuntime


<canvas height="@WindowSize.Height"
        width="@WindowSize.Width"
        class="@canvasStyle"
        @onmousedown="@StartPaint"
        @onmousemove="@Paint"
        @onmouseup="@StopPaint"
        @onmouseout="@StopPaint"
        @ref="@canvasTop"></canvas>
<canvas height="@WindowSize.Height"
        width="@WindowSize.Width"
        class="@canvasStyle"
        @onmousedown="@StartPaint"
        @onmousemove="@Paint"
        @onmouseup="@StopPaint"
        @onmouseout="@StopPaint"
        @ref="@canvasMid"></canvas>
<canvas height="@WindowSize.Height"
        width="@WindowSize.Width"
        class="@canvasStyle"
        @onmousedown="@StartPaint"
        @onmousemove="@Paint"
        @onmouseup="@StopPaint"
        @onmouseout="@StopPaint"
        @ref="@canvasBack"></canvas>

@code {

    private string canvasStyle;

    [Parameter]
    public WindowSize WindowSize { get; set; }


    ElementReference canvas;
    Canvas2DContext ctx;
    ColorPicker colorPicker;

    bool isPainting = false;
    double x;
    double y;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            ctx = new Canvas2DContext(JsRuntime, canvas);
        }
    }

    public async Task LoadImage(string path)
    {
        await ctx.DrawImage(path);
    }

    private void StartPaint(MouseEventArgs e)
    {

        x = e.ClientX;
        y = e.ClientY;
        isPainting = true;
    }

    private async Task Paint(MouseEventArgs e)
    {
        if (isPainting)
        {
            var eX = e.ClientX;
            var eY = e.ClientY;

            await ctx.DrawLine((long)x, (long)y, (long)eX, (long)eY);
            x = eX;
            y = eY;
        }
    }

    private void StopPaint(MouseEventArgs e)
    {
        isPainting = false;
    }

    private Action<MouseEventArgs> SetStrokeColor(string color)
    {
        return async _ =>
        {
            await ctx.SetStrokeStyleAsync(color);
        };
    }
}
